// Generated by rstantools.  Do not edit by hand.

/*
    bgchm is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    bgchm is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with bgchm.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_geocline_one_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_geocline_one");
    reader.add_event(44, 42, "end", "model_geocline_one");
    return reader;
}
#include <stan_meta_header.hpp>
class model_geocline_one
  : public stan::model::model_base_crtp<model_geocline_one> {
private:
        int J;
        std::vector<double> geo;
        std::vector<double> Y;
        double lb;
        double ub;
        double ga;
        double gb;
        double sdg;
public:
    model_geocline_one(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_geocline_one(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_geocline_one_namespace::model_geocline_one";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 3;
            context__.validate_dims("data initialization", "J", "int", context__.to_vec());
            J = int(0);
            vals_i__ = context__.vals_i("J");
            pos__ = 0;
            J = vals_i__[pos__++];
            current_statement_begin__ = 4;
            validate_non_negative_index("geo", "J", J);
            context__.validate_dims("data initialization", "geo", "double", context__.to_vec(J));
            geo = std::vector<double>(J, double(0));
            vals_r__ = context__.vals_r("geo");
            pos__ = 0;
            size_t geo_k_0_max__ = J;
            for (size_t k_0__ = 0; k_0__ < geo_k_0_max__; ++k_0__) {
                geo[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 5;
            validate_non_negative_index("Y", "J", J);
            context__.validate_dims("data initialization", "Y", "double", context__.to_vec(J));
            Y = std::vector<double>(J, double(0));
            vals_r__ = context__.vals_r("Y");
            pos__ = 0;
            size_t Y_k_0_max__ = J;
            for (size_t k_0__ = 0; k_0__ < Y_k_0_max__; ++k_0__) {
                Y[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 6;
            context__.validate_dims("data initialization", "lb", "double", context__.to_vec());
            lb = double(0);
            vals_r__ = context__.vals_r("lb");
            pos__ = 0;
            lb = vals_r__[pos__++];
            current_statement_begin__ = 7;
            context__.validate_dims("data initialization", "ub", "double", context__.to_vec());
            ub = double(0);
            vals_r__ = context__.vals_r("ub");
            pos__ = 0;
            ub = vals_r__[pos__++];
            current_statement_begin__ = 8;
            context__.validate_dims("data initialization", "ga", "double", context__.to_vec());
            ga = double(0);
            vals_r__ = context__.vals_r("ga");
            pos__ = 0;
            ga = vals_r__[pos__++];
            current_statement_begin__ = 9;
            context__.validate_dims("data initialization", "gb", "double", context__.to_vec());
            gb = double(0);
            vals_r__ = context__.vals_r("gb");
            pos__ = 0;
            gb = vals_r__[pos__++];
            // initialize transformed data variables
            current_statement_begin__ = 13;
            sdg = double(0);
            stan::math::fill(sdg, DUMMY_VAR__);
            // execute transformed data statements
            current_statement_begin__ = 14;
            stan::math::assign(sdg, (3 * sd(geo)));
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 19;
            num_params_r__ += 1;
            current_statement_begin__ = 20;
            num_params_r__ += 1;
            current_statement_begin__ = 21;
            num_params_r__ += 1;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_geocline_one() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 19;
        if (!(context__.contains_r("slope")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable slope missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("slope");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "slope", "double", context__.to_vec());
        double slope(0);
        slope = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(slope);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable slope: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 20;
        if (!(context__.contains_r("cent")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable cent missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("cent");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "cent", "double", context__.to_vec());
        double cent(0);
        cent = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(cent);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable cent: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 21;
        if (!(context__.contains_r("serr")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable serr missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("serr");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "serr", "double", context__.to_vec());
        double serr(0);
        serr = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, serr);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable serr: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 19;
            local_scalar_t__ slope;
            (void) slope;  // dummy to suppress unused var warning
            if (jacobian__)
                slope = in__.scalar_constrain(lp__);
            else
                slope = in__.scalar_constrain();
            current_statement_begin__ = 20;
            local_scalar_t__ cent;
            (void) cent;  // dummy to suppress unused var warning
            if (jacobian__)
                cent = in__.scalar_constrain(lp__);
            else
                cent = in__.scalar_constrain();
            current_statement_begin__ = 21;
            local_scalar_t__ serr;
            (void) serr;  // dummy to suppress unused var warning
            if (jacobian__)
                serr = in__.scalar_lb_constrain(0, lp__);
            else
                serr = in__.scalar_lb_constrain(0);
            // transformed parameters
            current_statement_begin__ = 25;
            local_scalar_t__ w;
            (void) w;  // dummy to suppress unused var warning
            stan::math::initialize(w, DUMMY_VAR__);
            stan::math::fill(w, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 27;
            stan::math::assign(w, (1 / (0.25 * slope)));
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 25;
            if (stan::math::is_uninitialized(w)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: w";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable w: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            // model body
            current_statement_begin__ = 32;
            for (int j = 1; j <= J; ++j) {
                current_statement_begin__ = 34;
                if (as_bool((primitive_value(logical_gt(get_base1(Y, j, "Y", 1), lb)) && primitive_value(logical_lt(get_base1(Y, j, "Y", 1), ub))))) {
                    current_statement_begin__ = 35;
                    lp_accum__.add(normal_log(get_base1(Y, j, "Y", 1), (cent + (slope * get_base1(geo, j, "geo", 1))), serr));
                }
            }
            current_statement_begin__ = 39;
            lp_accum__.add(normal_log(slope, 0, 10));
            current_statement_begin__ = 40;
            lp_accum__.add(normal_log(cent, 0, sdg));
            current_statement_begin__ = 41;
            lp_accum__.add(gamma_log(serr, ga, gb));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("slope");
        names__.push_back("cent");
        names__.push_back("serr");
        names__.push_back("w");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_geocline_one_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double slope = in__.scalar_constrain();
        vars__.push_back(slope);
        double cent = in__.scalar_constrain();
        vars__.push_back(cent);
        double serr = in__.scalar_lb_constrain(0);
        vars__.push_back(serr);
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 25;
            double w;
            (void) w;  // dummy to suppress unused var warning
            stan::math::initialize(w, DUMMY_VAR__);
            stan::math::fill(w, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 27;
            stan::math::assign(w, (1 / (0.25 * slope)));
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            // write transformed parameters
            if (include_tparams__) {
                vars__.push_back(w);
            }
            if (!include_gqs__) return;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_geocline_one";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "slope";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "cent";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "serr";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "w";
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__) return;
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "slope";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "cent";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "serr";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "w";
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__) return;
    }
}; // model
}  // namespace
typedef model_geocline_one_namespace::model_geocline_one stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
