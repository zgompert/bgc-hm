// Generated by rstantools.  Do not edit by hand.

/*
    bgchm is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    bgchm is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with bgchm.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.26.1-4-gd72b68b7-dirty
#include <stan/model/model_header.hpp>
namespace model_gencline_one_gl_mix_namespace {
inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 
stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'gencline_one_gl_mix', line 38, column 1 to column 38)",
                                                      " (in 'gencline_one_gl_mix', line 39, column 1 to column 28)",
                                                      " (in 'gencline_one_gl_mix', line 42, column 1 to column 31)",
                                                      " (in 'gencline_one_gl_mix', line 43, column 1 to column 23)",
                                                      " (in 'gencline_one_gl_mix', line 48, column 2 to column 76)",
                                                      " (in 'gencline_one_gl_mix', line 46, column 14 to line 49, column 2)",
                                                      " (in 'gencline_one_gl_mix', line 46, column 1 to line 49, column 2)",
                                                      " (in 'gencline_one_gl_mix', line 51, column 1 to column 46)",
                                                      " (in 'gencline_one_gl_mix', line 52, column 1 to column 41)",
                                                      " (in 'gencline_one_gl_mix', line 25, column 1 to column 7)",
                                                      " (in 'gencline_one_gl_mix', line 26, column 1 to column 7)",
                                                      " (in 'gencline_one_gl_mix', line 27, column 28 to column 29)",
                                                      " (in 'gencline_one_gl_mix', line 27, column 1 to column 31)",
                                                      " (in 'gencline_one_gl_mix', line 28, column 28 to column 29)",
                                                      " (in 'gencline_one_gl_mix', line 28, column 1 to column 31)",
                                                      " (in 'gencline_one_gl_mix', line 29, column 28 to column 29)",
                                                      " (in 'gencline_one_gl_mix', line 29, column 1 to column 31)",
                                                      " (in 'gencline_one_gl_mix', line 30, column 31 to column 32)",
                                                      " (in 'gencline_one_gl_mix', line 30, column 1 to column 34)",
                                                      " (in 'gencline_one_gl_mix', line 31, column 26 to column 27)",
                                                      " (in 'gencline_one_gl_mix', line 31, column 1 to column 31)",
                                                      " (in 'gencline_one_gl_mix', line 32, column 1 to column 27)",
                                                      " (in 'gencline_one_gl_mix', line 33, column 1 to column 27)",
                                                      " (in 'gencline_one_gl_mix', line 34, column 1 to column 18)",
                                                      " (in 'gencline_one_gl_mix', line 35, column 1 to column 18)",
                                                      " (in 'gencline_one_gl_mix', line 3, column 2 to column 11)",
                                                      " (in 'gencline_one_gl_mix', line 4, column 2 to column 43)",
                                                      " (in 'gencline_one_gl_mix', line 5, column 2 to column 13)",
                                                      " (in 'gencline_one_gl_mix', line 2, column 40 to line 6, column 2)",
                                                      " (in 'gencline_one_gl_mix', line 9, column 2 to column 12)",
                                                      " (in 'gencline_one_gl_mix', line 10, column 2 to column 11)",
                                                      " (in 'gencline_one_gl_mix', line 11, column 2 to column 28)",
                                                      " (in 'gencline_one_gl_mix', line 17, column 6 to column 61)",
                                                      " (in 'gencline_one_gl_mix', line 19, column 12 to column 60)",
                                                      " (in 'gencline_one_gl_mix', line 16, column 9 to line 20, column 3)",
                                                      " (in 'gencline_one_gl_mix', line 13, column 12 to column 106)",
                                                      " (in 'gencline_one_gl_mix', line 14, column 12 to column 99)",
                                                      " (in 'gencline_one_gl_mix', line 15, column 12 to column 91)",
                                                      " (in 'gencline_one_gl_mix', line 12, column 11 to line 16, column 3)",
                                                      " (in 'gencline_one_gl_mix', line 12, column 2 to line 20, column 3)",
                                                      " (in 'gencline_one_gl_mix', line 21, column 2 to column 14)",
                                                      " (in 'gencline_one_gl_mix', line 8, column 97 to line 22, column 2)"};
template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
calc_phi(const T0__& h, const T1__& vv, const T2__& uu,
         std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    local_scalar_t__ phi;
    phi = DUMMY_VAR__;
    
    current_statement__ = 27;
    phi = (pow(h, vv) /
            (pow(h, vv) + (pow((1 - h), vv) * stan::math::exp(uu))));
    current_statement__ = 28;
    return phi;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct calc_phi_functor__ {
template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
operator()(const T0__& h, const T1__& vv, const T2__& uu,
           std::ostream* pstream__)  const 
{
return calc_phi(h, vv, uu, pstream__);
}
};
template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__, typename T6__, typename T7__, typename T8__>
stan::promote_args_t<T0__, T1__, T2__, T3__, T4__, stan::promote_args_t<T5__,
T6__, T7__,
T8__>>
calc_lik(const T0__& gl0, const T1__& gl1, const T2__& gl2, const T3__& p0,
         const T4__& p1, const T5__& h, const T6__& vv, const T7__& uu,
         const T8__& pl, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
          T1__,
          T2__,
          T3__,
          T4__, stan::promote_args_t<T5__,
          T6__,
          T7__,
          T8__>>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    local_scalar_t__ prob;
    prob = DUMMY_VAR__;
    
    local_scalar_t__ phi;
    phi = DUMMY_VAR__;
    
    current_statement__ = 32;
    phi = calc_phi(h, vv, uu, pstream__);
    current_statement__ = 40;
    if (logical_eq(pl, 2)) {
      current_statement__ = 36;
      prob = ((stan::math::log(gl0) +
                stan::math::log(((phi * (1 - p1)) + ((1 - phi) * (1 - p0)))))
               +
               stan::math::log(((phi * (1 - p1)) + ((1 - phi) * (1 - p0)))));
      current_statement__ = 37;
      prob = (prob +
               ((stan::math::log(gl1) +
                  stan::math::log(
                    ((phi * (1 - p1)) + ((1 - phi) * (1 - p0))))) +
                 stan::math::log(((phi * p1) + ((1 - phi) * p0)))));
      current_statement__ = 38;
      prob = (prob +
               ((stan::math::log(gl2) +
                  stan::math::log(((phi * p1) + ((1 - phi) * p0)))) +
                 stan::math::log(((phi * p1) + ((1 - phi) * p0)))));
    } else {
      current_statement__ = 33;
      prob = (stan::math::log(gl0) +
               stan::math::log(((phi * (1 - p1)) + ((1 - phi) * (1 - p0)))));
      current_statement__ = 34;
      prob = (prob +
               (stan::math::log(gl2) +
                 stan::math::log(((phi * p1) + ((1 - phi) * p0)))));
    }
    current_statement__ = 41;
    return prob;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct calc_lik_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__, typename T6__, typename T7__, typename T8__>
stan::promote_args_t<T0__, T1__, T2__, T3__, T4__, stan::promote_args_t<T5__,
T6__, T7__,
T8__>>
operator()(const T0__& gl0, const T1__& gl1, const T2__& gl2, const T3__& p0,
           const T4__& p1, const T5__& h, const T6__& vv, const T7__& uu,
           const T8__& pl, std::ostream* pstream__)  const 
{
return calc_lik(gl0, gl1, gl2, p0, p1, h, vv, uu, pl, pstream__);
}
};
#include <stan_meta_header.hpp>
class model_gencline_one_gl_mix final : public model_base_crtp<model_gencline_one_gl_mix> {
private:
  int L;
  int N;
  std::vector<double> GL0;
  std::vector<double> GL1;
  std::vector<double> GL2;
  std::vector<double> ploidy;
  Eigen::Matrix<double, -1, 1> H;
  double P0;
  double P1;
  double sc;
  double sv;
 
public:
  ~model_gencline_one_gl_mix() { }
  
  inline std::string model_name() const final { return "model_gencline_one_gl_mix"; }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.26.1-4-gd72b68b7-dirty", "stancflags = "};
  }
  
  
  model_gencline_one_gl_mix(stan::io::var_context& context__,
                            unsigned int random_seed__ = 0,
                            std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "model_gencline_one_gl_mix_namespace::model_gencline_one_gl_mix";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 10;
      context__.validate_dims("data initialization","L","int",
          context__.to_vec());
      L = std::numeric_limits<int>::min();
      
      current_statement__ = 10;
      L = context__.vals_i("L")[(1 - 1)];
      current_statement__ = 11;
      context__.validate_dims("data initialization","N","int",
          context__.to_vec());
      N = std::numeric_limits<int>::min();
      
      current_statement__ = 11;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 12;
      validate_non_negative_index("GL0", "N", N);
      current_statement__ = 13;
      context__.validate_dims("data initialization","GL0","double",
          context__.to_vec(N));
      GL0 = std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 13;
      assign(GL0, nil_index_list(), context__.vals_r("GL0"),
        "assigning variable GL0");
      current_statement__ = 13;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 13;
        current_statement__ = 13;
        check_greater_or_equal(function__, "GL0[sym1__]", GL0[(sym1__ - 1)],
                               0);}
      current_statement__ = 13;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 13;
        current_statement__ = 13;
        check_less_or_equal(function__, "GL0[sym1__]", GL0[(sym1__ - 1)], 2);
      }
      current_statement__ = 14;
      validate_non_negative_index("GL1", "N", N);
      current_statement__ = 15;
      context__.validate_dims("data initialization","GL1","double",
          context__.to_vec(N));
      GL1 = std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 15;
      assign(GL1, nil_index_list(), context__.vals_r("GL1"),
        "assigning variable GL1");
      current_statement__ = 15;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 15;
        current_statement__ = 15;
        check_greater_or_equal(function__, "GL1[sym1__]", GL1[(sym1__ - 1)],
                               0);}
      current_statement__ = 15;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 15;
        current_statement__ = 15;
        check_less_or_equal(function__, "GL1[sym1__]", GL1[(sym1__ - 1)], 2);
      }
      current_statement__ = 16;
      validate_non_negative_index("GL2", "N", N);
      current_statement__ = 17;
      context__.validate_dims("data initialization","GL2","double",
          context__.to_vec(N));
      GL2 = std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 17;
      assign(GL2, nil_index_list(), context__.vals_r("GL2"),
        "assigning variable GL2");
      current_statement__ = 17;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 17;
        current_statement__ = 17;
        check_greater_or_equal(function__, "GL2[sym1__]", GL2[(sym1__ - 1)],
                               0);}
      current_statement__ = 17;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 17;
        current_statement__ = 17;
        check_less_or_equal(function__, "GL2[sym1__]", GL2[(sym1__ - 1)], 2);
      }
      current_statement__ = 18;
      validate_non_negative_index("ploidy", "N", N);
      current_statement__ = 19;
      context__.validate_dims("data initialization","ploidy","double",
          context__.to_vec(N));
      ploidy = std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 19;
      assign(ploidy, nil_index_list(), context__.vals_r("ploidy"),
        "assigning variable ploidy");
      current_statement__ = 19;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 19;
        current_statement__ = 19;
        check_greater_or_equal(function__, "ploidy[sym1__]",
                               ploidy[(sym1__ - 1)], 0);}
      current_statement__ = 19;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 19;
        current_statement__ = 19;
        check_less_or_equal(function__, "ploidy[sym1__]",
                            ploidy[(sym1__ - 1)], 2);}
      current_statement__ = 20;
      validate_non_negative_index("H", "N", N);
      current_statement__ = 21;
      context__.validate_dims("data initialization","H","double",
          context__.to_vec(N));
      H = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(H, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> H_flat__;
        current_statement__ = 21;
        assign(H_flat__, nil_index_list(), context__.vals_r("H"),
          "assigning variable H_flat__");
        current_statement__ = 21;
        pos__ = 1;
        current_statement__ = 21;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 21;
          assign(H, cons_list(index_uni(sym1__), nil_index_list()),
            H_flat__[(pos__ - 1)], "assigning variable H");
          current_statement__ = 21;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 21;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 21;
        current_statement__ = 21;
        check_greater_or_equal(function__, "H[sym1__]", H[(sym1__ - 1)], 0);}
      current_statement__ = 21;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 21;
        current_statement__ = 21;
        check_less_or_equal(function__, "H[sym1__]", H[(sym1__ - 1)], 1);}
      current_statement__ = 22;
      context__.validate_dims("data initialization","P0","double",
          context__.to_vec());
      P0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 22;
      P0 = context__.vals_r("P0")[(1 - 1)];
      current_statement__ = 22;
      current_statement__ = 22;
      check_greater_or_equal(function__, "P0", P0, 0);
      current_statement__ = 22;
      current_statement__ = 22;
      check_less_or_equal(function__, "P0", P0, 1);
      current_statement__ = 23;
      context__.validate_dims("data initialization","P1","double",
          context__.to_vec());
      P1 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 23;
      P1 = context__.vals_r("P1")[(1 - 1)];
      current_statement__ = 23;
      current_statement__ = 23;
      check_greater_or_equal(function__, "P1", P1, 0);
      current_statement__ = 23;
      current_statement__ = 23;
      check_less_or_equal(function__, "P1", P1, 1);
      current_statement__ = 24;
      context__.validate_dims("data initialization","sc","double",
          context__.to_vec());
      sc = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 24;
      sc = context__.vals_r("sc")[(1 - 1)];
      current_statement__ = 24;
      current_statement__ = 24;
      check_greater_or_equal(function__, "sc", sc, 0);
      current_statement__ = 25;
      context__.validate_dims("data initialization","sv","double",
          context__.to_vec());
      sv = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 25;
      sv = context__.vals_r("sv")[(1 - 1)];
      current_statement__ = 25;
      current_statement__ = 25;
      check_greater_or_equal(function__, "sv", sv, 0);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += 1;
      num_params_r__ += 1;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "model_gencline_one_gl_mix_namespace::log_prob";
(void) function__;  // suppress unused var warning
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      local_scalar_t__ center;
      center = DUMMY_VAR__;
      
      current_statement__ = 1;
      center = in__.scalar();
      current_statement__ = 1;
      if (jacobian__) {
        current_statement__ = 1;
        center = stan::math::lub_constrain(center, 0.001, 0.999, lp__);
      } else {
        current_statement__ = 1;
        center = stan::math::lub_constrain(center, 0.001, 0.999);
      }
      local_scalar_t__ v;
      v = DUMMY_VAR__;
      
      current_statement__ = 2;
      v = in__.scalar();
      current_statement__ = 2;
      if (jacobian__) {
        current_statement__ = 2;
        v = stan::math::lub_constrain(v, 0.1, 10, lp__);
      } else {
        current_statement__ = 2;
        v = stan::math::lub_constrain(v, 0.1, 10);
      }
      local_scalar_t__ u;
      u = DUMMY_VAR__;
      
      current_statement__ = 4;
      u = (logit(center) * v);
      current_statement__ = 3;
      current_statement__ = 3;
      check_greater_or_equal(function__, "u", u, -100);
      current_statement__ = 3;
      current_statement__ = 3;
      check_less_or_equal(function__, "u", u, 100);
      {
        current_statement__ = 7;
        for (int j = 1; j <= N; ++j) {
          current_statement__ = 5;
          lp_accum__.add(
            calc_lik(GL0[(j - 1)], GL1[(j - 1)], GL2[(j - 1)], P0, P1,
              H[(j - 1)], v, u, ploidy[(j - 1)], pstream__));}
        current_statement__ = 8;
        lp_accum__.add(normal_lpdf<false>(logit(center), 0, sc));
        current_statement__ = 9;
        lp_accum__.add(normal_lpdf<false>(stan::math::log10(v), 0, sv));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "model_gencline_one_gl_mix_namespace::write_array";
(void) function__;  // suppress unused var warning
    (void) function__;  // suppress unused var warning
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      double center;
      center = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      center = in__.scalar();
      current_statement__ = 1;
      center = stan::math::lub_constrain(center, 0.001, 0.999);
      double v;
      v = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      v = in__.scalar();
      current_statement__ = 2;
      v = stan::math::lub_constrain(v, 0.1, 10);
      double u;
      u = std::numeric_limits<double>::quiet_NaN();
      
      vars__.emplace_back(center);
      vars__.emplace_back(v);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 4;
      u = (logit(center) * v);
      current_statement__ = 3;
      current_statement__ = 3;
      check_greater_or_equal(function__, "u", u, -100);
      current_statement__ = 3;
      current_statement__ = 3;
      check_less_or_equal(function__, "u", u, 100);
      if (emit_transformed_parameters__) {
        vars__.emplace_back(u);
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      double center;
      center = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      center = context__.vals_r("center")[(1 - 1)];
      double center_free__;
      center_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      center_free__ = stan::math::lub_free(center, 0.001, 0.999);
      double v;
      v = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      v = context__.vals_r("v")[(1 - 1)];
      double v_free__;
      v_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      v_free__ = stan::math::lub_free(v, 0.1, 10);
      vars__.emplace_back(center_free__);
      vars__.emplace_back(v_free__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("center");
    names__.emplace_back("v");
    names__.emplace_back("u");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "center");
    param_names__.emplace_back(std::string() + "v");
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "u");
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "center");
    param_names__.emplace_back(std::string() + "v");
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "u");
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"center\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"v\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"u\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"center\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"v\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"u\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }
    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }
    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  
    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        
};
}
using stan_model = model_gencline_one_gl_mix_namespace::model_gencline_one_gl_mix;
#ifndef USING_R
// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_gencline_one_gl_mix_namespace::profiles__;
}
#endif
#endif
