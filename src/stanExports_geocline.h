// Generated by rstantools.  Do not edit by hand.

/*
    bgchm is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    bgchm is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with bgchm.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_geocline_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 41> locations_array__ =
  {" (found before start of program)",
  " (in 'geocline', line 19, column 4 to column 20)",
  " (in 'geocline', line 20, column 4 to column 19)",
  " (in 'geocline', line 21, column 4 to column 12)",
  " (in 'geocline', line 22, column 4 to column 24)",
  " (in 'geocline', line 23, column 4 to column 23)",
  " (in 'geocline', line 26, column 4 to column 16)",
  " (in 'geocline', line 29, column 8 to column 35)",
  " (in 'geocline', line 28, column 17 to line 30, column 5)",
  " (in 'geocline', line 28, column 4 to line 30, column 5)",
  " (in 'geocline', line 38, column 7 to column 73)",
  " (in 'geocline', line 37, column 2 to line 38, column 73)",
  " (in 'geocline', line 35, column 18 to line 39, column 10)",
  " (in 'geocline', line 35, column 5 to line 39, column 10)",
  " (in 'geocline', line 34, column 14 to line 40, column 2)",
  " (in 'geocline', line 34, column 1 to line 40, column 2)",
  " (in 'geocline', line 43, column 5 to column 49)",
  " (in 'geocline', line 44, column 5 to column 45)",
  " (in 'geocline', line 42, column 14 to line 45, column 2)",
  " (in 'geocline', line 42, column 1 to line 45, column 2)",
  " (in 'geocline', line 46, column 1 to column 36)",
  " (in 'geocline', line 47, column 1 to column 38)",
  " (in 'geocline', line 48, column 1 to column 37)",
  " (in 'geocline', line 2, column 1 to column 7)",
  " (in 'geocline', line 3, column 1 to column 7)",
  " (in 'geocline', line 4, column 7 to column 8)",
  " (in 'geocline', line 4, column 1 to column 19)",
  " (in 'geocline', line 5, column 7 to column 8)",
  " (in 'geocline', line 5, column 10 to column 11)",
  " (in 'geocline', line 5, column 1 to column 20)",
  " (in 'geocline', line 6, column 1 to column 9)",
  " (in 'geocline', line 7, column 1 to column 9)",
  " (in 'geocline', line 8, column 1 to column 9)",
  " (in 'geocline', line 9, column 1 to column 9)",
  " (in 'geocline', line 12, column 4 to column 13)",
  " (in 'geocline', line 13, column 4 to column 13)",
  " (in 'geocline', line 14, column 4 to column 22)",
  " (in 'geocline', line 15, column 4 to column 26)",
  " (in 'geocline', line 19, column 11 to column 12)",
  " (in 'geocline', line 20, column 11 to column 12)",
  " (in 'geocline', line 26, column 11 to column 12)"};
#include <stan_meta_header.hpp>
class model_geocline final : public model_base_crtp<model_geocline> {
private:
  int L;
  int J;
  std::vector<double> geo;
  std::vector<std::vector<double>> Y;
  double lb;
  double ub;
  double ga;
  double gb;
  double sdg;
  double sds;
public:
  ~model_geocline() {}
  model_geocline(stan::io::var_context& context__, unsigned int
                 random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_geocline_namespace::model_geocline";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 23;
      context__.validate_dims("data initialization", "L", "int",
        std::vector<size_t>{});
      L = std::numeric_limits<int>::min();
      current_statement__ = 23;
      L = context__.vals_i("L")[(1 - 1)];
      current_statement__ = 24;
      context__.validate_dims("data initialization", "J", "int",
        std::vector<size_t>{});
      J = std::numeric_limits<int>::min();
      current_statement__ = 24;
      J = context__.vals_i("J")[(1 - 1)];
      current_statement__ = 25;
      stan::math::validate_non_negative_index("geo", "J", J);
      current_statement__ = 26;
      context__.validate_dims("data initialization", "geo", "double",
        std::vector<size_t>{static_cast<size_t>(J)});
      geo = std::vector<double>(J, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 26;
      geo = context__.vals_r("geo");
      current_statement__ = 27;
      stan::math::validate_non_negative_index("Y", "J", J);
      current_statement__ = 28;
      stan::math::validate_non_negative_index("Y", "L", L);
      current_statement__ = 29;
      context__.validate_dims("data initialization", "Y", "double",
        std::vector<size_t>{static_cast<size_t>(J), static_cast<size_t>(L)});
      Y = std::vector<std::vector<double>>(J,
            std::vector<double>(L, std::numeric_limits<double>::quiet_NaN()));
      {
        std::vector<local_scalar_t__> Y_flat__;
        current_statement__ = 29;
        Y_flat__ = context__.vals_r("Y");
        current_statement__ = 29;
        pos__ = 1;
        current_statement__ = 29;
        for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
          current_statement__ = 29;
          for (int sym2__ = 1; sym2__ <= J; ++sym2__) {
            current_statement__ = 29;
            stan::model::assign(Y, Y_flat__[(pos__ - 1)],
              "assigning variable Y", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 29;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 30;
      context__.validate_dims("data initialization", "lb", "double",
        std::vector<size_t>{});
      lb = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 30;
      lb = context__.vals_r("lb")[(1 - 1)];
      current_statement__ = 31;
      context__.validate_dims("data initialization", "ub", "double",
        std::vector<size_t>{});
      ub = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 31;
      ub = context__.vals_r("ub")[(1 - 1)];
      current_statement__ = 32;
      context__.validate_dims("data initialization", "ga", "double",
        std::vector<size_t>{});
      ga = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 32;
      ga = context__.vals_r("ga")[(1 - 1)];
      current_statement__ = 33;
      context__.validate_dims("data initialization", "gb", "double",
        std::vector<size_t>{});
      gb = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 33;
      gb = context__.vals_r("gb")[(1 - 1)];
      current_statement__ = 34;
      sdg = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 35;
      sds = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 36;
      sdg = (3 * stan::math::sd(geo));
      current_statement__ = 37;
      sds = ((1.5 * 4) / stan::math::sd(geo));
      current_statement__ = 38;
      stan::math::validate_non_negative_index("slope", "L", L);
      current_statement__ = 39;
      stan::math::validate_non_negative_index("cent", "L", L);
      current_statement__ = 40;
      stan::math::validate_non_negative_index("w", "L", L);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = L + L + 1 + 1 + 1;
  }
  inline std::string model_name() const final {
    return "model_geocline";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_geocline_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> slope =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(L, DUMMY_VAR__);
      current_statement__ = 1;
      slope = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(L);
      Eigen::Matrix<local_scalar_t__,-1,1> cent =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(L, DUMMY_VAR__);
      current_statement__ = 2;
      cent = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(L);
      local_scalar_t__ mu = DUMMY_VAR__;
      current_statement__ = 3;
      mu = in__.template read<local_scalar_t__>();
      local_scalar_t__ sigma = DUMMY_VAR__;
      current_statement__ = 4;
      sigma = in__.template read_constrain_lb<local_scalar_t__,
                jacobian__>(0, lp__);
      local_scalar_t__ serr = DUMMY_VAR__;
      current_statement__ = 5;
      serr = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
               lp__);
      Eigen::Matrix<local_scalar_t__,-1,1> w =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(L, DUMMY_VAR__);
      current_statement__ = 9;
      for (int i = 1; i <= L; ++i) {
        current_statement__ = 7;
        stan::model::assign(w, (1 / (0.25 *
          stan::model::rvalue(slope, "slope", stan::model::index_uni(i)))),
          "assigning variable w", stan::model::index_uni(i));
      }
      {
        current_statement__ = 15;
        for (int i = 1; i <= L; ++i) {
          current_statement__ = 13;
          for (int j = 1; j <= J; ++j) {
            current_statement__ = 11;
            if ((stan::math::primitive_value(
                   stan::math::logical_gt(
                     stan::model::rvalue(Y, "Y", stan::model::index_uni(j),
                       stan::model::index_uni(i)), lb))
                &&
                stan::math::primitive_value(
                  stan::math::logical_lt(
                    stan::model::rvalue(Y, "Y", stan::model::index_uni(j),
                      stan::model::index_uni(i)), ub)))) {
              current_statement__ = 10;
              lp_accum__.add(stan::math::normal_lpdf<false>(
                               stan::model::rvalue(Y, "Y",
                                 stan::model::index_uni(j),
                                 stan::model::index_uni(i)),
                               (stan::model::rvalue(cent, "cent",
                                  stan::model::index_uni(i)) +
                               (stan::model::rvalue(slope, "slope",
                                  stan::model::index_uni(i)) *
                               stan::model::rvalue(geo, "geo",
                                 stan::model::index_uni(j)))), serr));
            }
          }
        }
        current_statement__ = 19;
        for (int i = 1; i <= L; ++i) {
          current_statement__ = 16;
          lp_accum__.add(stan::math::normal_lpdf<false>(
                           stan::model::rvalue(slope, "slope",
                             stan::model::index_uni(i)), mu, sigma));
          current_statement__ = 17;
          lp_accum__.add(stan::math::normal_lpdf<false>(
                           stan::model::rvalue(cent, "cent",
                             stan::model::index_uni(i)), 0, sdg));
        }
        current_statement__ = 20;
        lp_accum__.add(stan::math::normal_lpdf<false>(mu, 0, sds));
        current_statement__ = 21;
        lp_accum__.add(stan::math::gamma_lpdf<false>(sigma, ga, gb));
        current_statement__ = 22;
        lp_accum__.add(stan::math::gamma_lpdf<false>(serr, ga, gb));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_geocline_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<double,-1,1> slope =
        Eigen::Matrix<double,-1,1>::Constant(L,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      slope = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(L);
      Eigen::Matrix<double,-1,1> cent =
        Eigen::Matrix<double,-1,1>::Constant(L,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      cent = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(L);
      double mu = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 3;
      mu = in__.template read<local_scalar_t__>();
      double sigma = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 4;
      sigma = in__.template read_constrain_lb<local_scalar_t__,
                jacobian__>(0, lp__);
      double serr = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 5;
      serr = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
               lp__);
      Eigen::Matrix<double,-1,1> w =
        Eigen::Matrix<double,-1,1>::Constant(L,
          std::numeric_limits<double>::quiet_NaN());
      out__.write(slope);
      out__.write(cent);
      out__.write(mu);
      out__.write(sigma);
      out__.write(serr);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 9;
      for (int i = 1; i <= L; ++i) {
        current_statement__ = 7;
        stan::model::assign(w, (1 / (0.25 *
          stan::model::rvalue(slope, "slope", stan::model::index_uni(i)))),
          "assigning variable w", stan::model::index_uni(i));
      }
      if (emit_transformed_parameters__) {
        out__.write(w);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> slope =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(L, DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(slope,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(L),
        "assigning variable slope");
      out__.write(slope);
      Eigen::Matrix<local_scalar_t__,-1,1> cent =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(L, DUMMY_VAR__);
      current_statement__ = 2;
      stan::model::assign(cent,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(L),
        "assigning variable cent");
      out__.write(cent);
      local_scalar_t__ mu = DUMMY_VAR__;
      current_statement__ = 3;
      mu = in__.read<local_scalar_t__>();
      out__.write(mu);
      local_scalar_t__ sigma = DUMMY_VAR__;
      current_statement__ = 4;
      sigma = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma);
      local_scalar_t__ serr = DUMMY_VAR__;
      current_statement__ = 5;
      serr = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, serr);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "slope", "double",
        std::vector<size_t>{static_cast<size_t>(L)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "cent", "double",
        std::vector<size_t>{static_cast<size_t>(L)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "mu", "double",
        std::vector<size_t>{});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "sigma", "double",
        std::vector<size_t>{});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization", "serr", "double",
        std::vector<size_t>{});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> slope =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(L, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> slope_flat__;
        current_statement__ = 1;
        slope_flat__ = context__.vals_r("slope");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
          current_statement__ = 1;
          stan::model::assign(slope, slope_flat__[(pos__ - 1)],
            "assigning variable slope", stan::model::index_uni(sym1__));
          current_statement__ = 1;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(slope);
      Eigen::Matrix<local_scalar_t__,-1,1> cent =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(L, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> cent_flat__;
        current_statement__ = 2;
        cent_flat__ = context__.vals_r("cent");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
          current_statement__ = 2;
          stan::model::assign(cent, cent_flat__[(pos__ - 1)],
            "assigning variable cent", stan::model::index_uni(sym1__));
          current_statement__ = 2;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(cent);
      local_scalar_t__ mu = DUMMY_VAR__;
      current_statement__ = 3;
      mu = context__.vals_r("mu")[(1 - 1)];
      out__.write(mu);
      local_scalar_t__ sigma = DUMMY_VAR__;
      current_statement__ = 4;
      sigma = context__.vals_r("sigma")[(1 - 1)];
      out__.write_free_lb(0, sigma);
      local_scalar_t__ serr = DUMMY_VAR__;
      current_statement__ = 5;
      serr = context__.vals_r("serr")[(1 - 1)];
      out__.write_free_lb(0, serr);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"slope", "cent", "mu", "sigma",
                "serr"};
    if (emit_transformed_parameters__) {
      std::vector<std::string> temp{"w"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(L)},
                std::vector<size_t>{static_cast<size_t>(L)},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(L)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
      param_names__.emplace_back(std::string() + "slope" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
      param_names__.emplace_back(std::string() + "cent" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "mu");
    param_names__.emplace_back(std::string() + "sigma");
    param_names__.emplace_back(std::string() + "serr");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        param_names__.emplace_back(std::string() + "w" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
      param_names__.emplace_back(std::string() + "slope" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
      param_names__.emplace_back(std::string() + "cent" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "mu");
    param_names__.emplace_back(std::string() + "sigma");
    param_names__.emplace_back(std::string() + "serr");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        param_names__.emplace_back(std::string() + "w" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"slope\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(L) + "},\"block\":\"parameters\"},{\"name\":\"cent\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(L) + "},\"block\":\"parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"serr\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"w\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(L) + "},\"block\":\"transformed_parameters\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"slope\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(L) + "},\"block\":\"parameters\"},{\"name\":\"cent\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(L) + "},\"block\":\"parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"serr\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"w\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(L) + "},\"block\":\"transformed_parameters\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((L + L) + 1) + 1) + 1);
    const size_t num_transformed = emit_transformed_parameters * (L);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((L + L) + 1) + 1) + 1);
    const size_t num_transformed = emit_transformed_parameters * (L);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_geocline_namespace::model_geocline;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_geocline_namespace::profiles__;
}
#endif
#endif
