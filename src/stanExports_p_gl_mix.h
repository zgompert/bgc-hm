// Generated by rstantools.  Do not edit by hand.

/*
    bgchm is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    bgchm is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with bgchm.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_p_gl_mix_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_p_gl_mix");
    reader.add_event(55, 53, "end", "model_p_gl_mix");
    return reader;
}
template <typename T0__, typename T1__, typename T2__, typename T3__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
calc_lik(const T0__& gl0,
             const T1__& gl1,
             const T2__& gl2,
             const T3__& p,
             const int& pl, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 4;
        local_scalar_t__ prob(DUMMY_VAR__);
        (void) prob;  // dummy to suppress unused var warning
        stan::math::initialize(prob, DUMMY_VAR__);
        stan::math::fill(prob, DUMMY_VAR__);
        current_statement_begin__ = 5;
        if (as_bool(logical_eq(pl, 2))) {
            current_statement_begin__ = 6;
            stan::math::assign(prob, ((stan::math::log(gl0) + stan::math::log((1 - p))) + stan::math::log((1 - p))));
            current_statement_begin__ = 7;
            stan::math::assign(prob, log_sum_exp(prob, (((stan::math::log(gl1) + stan::math::log(2)) + stan::math::log(p)) + stan::math::log((1 - p)))));
            current_statement_begin__ = 8;
            stan::math::assign(prob, log_sum_exp(prob, ((stan::math::log(gl2) + stan::math::log(p)) + stan::math::log(p))));
        } else {
            current_statement_begin__ = 10;
            stan::math::assign(prob, (stan::math::log(gl0) + stan::math::log((1 - p))));
            current_statement_begin__ = 12;
            stan::math::assign(prob, log_sum_exp(prob, (stan::math::log(gl2) + stan::math::log(p))));
        }
        current_statement_begin__ = 14;
        return stan::math::promote_scalar<fun_return_scalar_t__>(prob);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct calc_lik_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
    operator()(const T0__& gl0,
             const T1__& gl1,
             const T2__& gl2,
             const T3__& p,
             const int& pl, std::ostream* pstream__) const {
        return calc_lik(gl0, gl1, gl2, p, pl, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_p_gl_mix
  : public stan::model::model_base_crtp<model_p_gl_mix> {
private:
        int L;
        int N0;
        int N1;
        std::vector<std::vector<double> > GL00;
        std::vector<std::vector<double> > GL10;
        std::vector<std::vector<double> > GL01;
        std::vector<std::vector<double> > GL11;
        std::vector<std::vector<double> > GL02;
        std::vector<std::vector<double> > GL12;
        std::vector<std::vector<int> > ploidy0;
        std::vector<std::vector<int> > ploidy1;
public:
    model_p_gl_mix(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_p_gl_mix(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_p_gl_mix_namespace::model_p_gl_mix";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 18;
            context__.validate_dims("data initialization", "L", "int", context__.to_vec());
            L = int(0);
            vals_i__ = context__.vals_i("L");
            pos__ = 0;
            L = vals_i__[pos__++];
            current_statement_begin__ = 19;
            context__.validate_dims("data initialization", "N0", "int", context__.to_vec());
            N0 = int(0);
            vals_i__ = context__.vals_i("N0");
            pos__ = 0;
            N0 = vals_i__[pos__++];
            current_statement_begin__ = 20;
            context__.validate_dims("data initialization", "N1", "int", context__.to_vec());
            N1 = int(0);
            vals_i__ = context__.vals_i("N1");
            pos__ = 0;
            N1 = vals_i__[pos__++];
            current_statement_begin__ = 21;
            validate_non_negative_index("GL00", "N0", N0);
            validate_non_negative_index("GL00", "L", L);
            context__.validate_dims("data initialization", "GL00", "double", context__.to_vec(N0,L));
            GL00 = std::vector<std::vector<double> >(N0, std::vector<double>(L, double(0)));
            vals_r__ = context__.vals_r("GL00");
            pos__ = 0;
            size_t GL00_k_0_max__ = N0;
            size_t GL00_k_1_max__ = L;
            for (size_t k_1__ = 0; k_1__ < GL00_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < GL00_k_0_max__; ++k_0__) {
                    GL00[k_0__][k_1__] = vals_r__[pos__++];
                }
            }
            size_t GL00_i_0_max__ = N0;
            size_t GL00_i_1_max__ = L;
            for (size_t i_0__ = 0; i_0__ < GL00_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < GL00_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "GL00[i_0__][i_1__]", GL00[i_0__][i_1__], 0);
                    check_less_or_equal(function__, "GL00[i_0__][i_1__]", GL00[i_0__][i_1__], 2);
                }
            }
            current_statement_begin__ = 22;
            validate_non_negative_index("GL10", "N1", N1);
            validate_non_negative_index("GL10", "L", L);
            context__.validate_dims("data initialization", "GL10", "double", context__.to_vec(N1,L));
            GL10 = std::vector<std::vector<double> >(N1, std::vector<double>(L, double(0)));
            vals_r__ = context__.vals_r("GL10");
            pos__ = 0;
            size_t GL10_k_0_max__ = N1;
            size_t GL10_k_1_max__ = L;
            for (size_t k_1__ = 0; k_1__ < GL10_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < GL10_k_0_max__; ++k_0__) {
                    GL10[k_0__][k_1__] = vals_r__[pos__++];
                }
            }
            size_t GL10_i_0_max__ = N1;
            size_t GL10_i_1_max__ = L;
            for (size_t i_0__ = 0; i_0__ < GL10_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < GL10_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "GL10[i_0__][i_1__]", GL10[i_0__][i_1__], 0);
                    check_less_or_equal(function__, "GL10[i_0__][i_1__]", GL10[i_0__][i_1__], 2);
                }
            }
            current_statement_begin__ = 23;
            validate_non_negative_index("GL01", "N0", N0);
            validate_non_negative_index("GL01", "L", L);
            context__.validate_dims("data initialization", "GL01", "double", context__.to_vec(N0,L));
            GL01 = std::vector<std::vector<double> >(N0, std::vector<double>(L, double(0)));
            vals_r__ = context__.vals_r("GL01");
            pos__ = 0;
            size_t GL01_k_0_max__ = N0;
            size_t GL01_k_1_max__ = L;
            for (size_t k_1__ = 0; k_1__ < GL01_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < GL01_k_0_max__; ++k_0__) {
                    GL01[k_0__][k_1__] = vals_r__[pos__++];
                }
            }
            size_t GL01_i_0_max__ = N0;
            size_t GL01_i_1_max__ = L;
            for (size_t i_0__ = 0; i_0__ < GL01_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < GL01_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "GL01[i_0__][i_1__]", GL01[i_0__][i_1__], 0);
                    check_less_or_equal(function__, "GL01[i_0__][i_1__]", GL01[i_0__][i_1__], 2);
                }
            }
            current_statement_begin__ = 24;
            validate_non_negative_index("GL11", "N1", N1);
            validate_non_negative_index("GL11", "L", L);
            context__.validate_dims("data initialization", "GL11", "double", context__.to_vec(N1,L));
            GL11 = std::vector<std::vector<double> >(N1, std::vector<double>(L, double(0)));
            vals_r__ = context__.vals_r("GL11");
            pos__ = 0;
            size_t GL11_k_0_max__ = N1;
            size_t GL11_k_1_max__ = L;
            for (size_t k_1__ = 0; k_1__ < GL11_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < GL11_k_0_max__; ++k_0__) {
                    GL11[k_0__][k_1__] = vals_r__[pos__++];
                }
            }
            size_t GL11_i_0_max__ = N1;
            size_t GL11_i_1_max__ = L;
            for (size_t i_0__ = 0; i_0__ < GL11_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < GL11_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "GL11[i_0__][i_1__]", GL11[i_0__][i_1__], 0);
                    check_less_or_equal(function__, "GL11[i_0__][i_1__]", GL11[i_0__][i_1__], 2);
                }
            }
            current_statement_begin__ = 25;
            validate_non_negative_index("GL02", "N0", N0);
            validate_non_negative_index("GL02", "L", L);
            context__.validate_dims("data initialization", "GL02", "double", context__.to_vec(N0,L));
            GL02 = std::vector<std::vector<double> >(N0, std::vector<double>(L, double(0)));
            vals_r__ = context__.vals_r("GL02");
            pos__ = 0;
            size_t GL02_k_0_max__ = N0;
            size_t GL02_k_1_max__ = L;
            for (size_t k_1__ = 0; k_1__ < GL02_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < GL02_k_0_max__; ++k_0__) {
                    GL02[k_0__][k_1__] = vals_r__[pos__++];
                }
            }
            size_t GL02_i_0_max__ = N0;
            size_t GL02_i_1_max__ = L;
            for (size_t i_0__ = 0; i_0__ < GL02_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < GL02_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "GL02[i_0__][i_1__]", GL02[i_0__][i_1__], 0);
                    check_less_or_equal(function__, "GL02[i_0__][i_1__]", GL02[i_0__][i_1__], 2);
                }
            }
            current_statement_begin__ = 26;
            validate_non_negative_index("GL12", "N1", N1);
            validate_non_negative_index("GL12", "L", L);
            context__.validate_dims("data initialization", "GL12", "double", context__.to_vec(N1,L));
            GL12 = std::vector<std::vector<double> >(N1, std::vector<double>(L, double(0)));
            vals_r__ = context__.vals_r("GL12");
            pos__ = 0;
            size_t GL12_k_0_max__ = N1;
            size_t GL12_k_1_max__ = L;
            for (size_t k_1__ = 0; k_1__ < GL12_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < GL12_k_0_max__; ++k_0__) {
                    GL12[k_0__][k_1__] = vals_r__[pos__++];
                }
            }
            size_t GL12_i_0_max__ = N1;
            size_t GL12_i_1_max__ = L;
            for (size_t i_0__ = 0; i_0__ < GL12_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < GL12_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "GL12[i_0__][i_1__]", GL12[i_0__][i_1__], 0);
                    check_less_or_equal(function__, "GL12[i_0__][i_1__]", GL12[i_0__][i_1__], 2);
                }
            }
            current_statement_begin__ = 27;
            validate_non_negative_index("ploidy0", "N0", N0);
            validate_non_negative_index("ploidy0", "L", L);
            context__.validate_dims("data initialization", "ploidy0", "int", context__.to_vec(N0,L));
            ploidy0 = std::vector<std::vector<int> >(N0, std::vector<int>(L, int(0)));
            vals_i__ = context__.vals_i("ploidy0");
            pos__ = 0;
            size_t ploidy0_k_0_max__ = N0;
            size_t ploidy0_k_1_max__ = L;
            for (size_t k_1__ = 0; k_1__ < ploidy0_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < ploidy0_k_0_max__; ++k_0__) {
                    ploidy0[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            size_t ploidy0_i_0_max__ = N0;
            size_t ploidy0_i_1_max__ = L;
            for (size_t i_0__ = 0; i_0__ < ploidy0_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < ploidy0_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "ploidy0[i_0__][i_1__]", ploidy0[i_0__][i_1__], 0);
                    check_less_or_equal(function__, "ploidy0[i_0__][i_1__]", ploidy0[i_0__][i_1__], 2);
                }
            }
            current_statement_begin__ = 28;
            validate_non_negative_index("ploidy1", "N1", N1);
            validate_non_negative_index("ploidy1", "L", L);
            context__.validate_dims("data initialization", "ploidy1", "int", context__.to_vec(N1,L));
            ploidy1 = std::vector<std::vector<int> >(N1, std::vector<int>(L, int(0)));
            vals_i__ = context__.vals_i("ploidy1");
            pos__ = 0;
            size_t ploidy1_k_0_max__ = N1;
            size_t ploidy1_k_1_max__ = L;
            for (size_t k_1__ = 0; k_1__ < ploidy1_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < ploidy1_k_0_max__; ++k_0__) {
                    ploidy1[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            size_t ploidy1_i_0_max__ = N1;
            size_t ploidy1_i_1_max__ = L;
            for (size_t i_0__ = 0; i_0__ < ploidy1_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < ploidy1_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "ploidy1[i_0__][i_1__]", ploidy1[i_0__][i_1__], 0);
                    check_less_or_equal(function__, "ploidy1[i_0__][i_1__]", ploidy1[i_0__][i_1__], 2);
                }
            }
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 32;
            validate_non_negative_index("P0", "L", L);
            num_params_r__ += L;
            current_statement_begin__ = 33;
            validate_non_negative_index("P1", "L", L);
            num_params_r__ += L;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_p_gl_mix() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 32;
        if (!(context__.contains_r("P0")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable P0 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("P0");
        pos__ = 0U;
        validate_non_negative_index("P0", "L", L);
        context__.validate_dims("parameter initialization", "P0", "vector_d", context__.to_vec(L));
        Eigen::Matrix<double, Eigen::Dynamic, 1> P0(L);
        size_t P0_j_1_max__ = L;
        for (size_t j_1__ = 0; j_1__ < P0_j_1_max__; ++j_1__) {
            P0(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lub_unconstrain(0, 1, P0);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable P0: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 33;
        if (!(context__.contains_r("P1")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable P1 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("P1");
        pos__ = 0U;
        validate_non_negative_index("P1", "L", L);
        context__.validate_dims("parameter initialization", "P1", "vector_d", context__.to_vec(L));
        Eigen::Matrix<double, Eigen::Dynamic, 1> P1(L);
        size_t P1_j_1_max__ = L;
        for (size_t j_1__ = 0; j_1__ < P1_j_1_max__; ++j_1__) {
            P1(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lub_unconstrain(0, 1, P1);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable P1: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 32;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> P0;
            (void) P0;  // dummy to suppress unused var warning
            if (jacobian__)
                P0 = in__.vector_lub_constrain(0, 1, L, lp__);
            else
                P0 = in__.vector_lub_constrain(0, 1, L);
            current_statement_begin__ = 33;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> P1;
            (void) P1;  // dummy to suppress unused var warning
            if (jacobian__)
                P1 = in__.vector_lub_constrain(0, 1, L, lp__);
            else
                P1 = in__.vector_lub_constrain(0, 1, L);
            // model body
            current_statement_begin__ = 38;
            for (int i = 1; i <= L; ++i) {
                current_statement_begin__ = 39;
                for (int j = 1; j <= N0; ++j) {
                    current_statement_begin__ = 41;
                    lp_accum__.add(calc_lik(get_base1(get_base1(GL00, j, "GL00", 1), i, "GL00", 2), get_base1(get_base1(GL01, j, "GL01", 1), i, "GL01", 2), get_base1(get_base1(GL02, j, "GL02", 1), i, "GL02", 2), get_base1(P0, i, "P0", 1), get_base1(get_base1(ploidy0, j, "ploidy0", 1), i, "ploidy0", 2), pstream__));
                }
                current_statement_begin__ = 43;
                for (int j = 1; j <= N1; ++j) {
                    current_statement_begin__ = 45;
                    lp_accum__.add(calc_lik(get_base1(get_base1(GL10, j, "GL10", 1), i, "GL10", 2), get_base1(get_base1(GL11, j, "GL11", 1), i, "GL11", 2), get_base1(get_base1(GL12, j, "GL12", 1), i, "GL12", 2), get_base1(P1, i, "P1", 1), get_base1(get_base1(ploidy1, j, "ploidy1", 1), i, "ploidy1", 2), pstream__));
                }
            }
            current_statement_begin__ = 48;
            for (int i = 1; i <= L; ++i) {
                current_statement_begin__ = 50;
                lp_accum__.add(beta_log(get_base1(P0, i, "P0", 1), 0.5, 0.5));
                current_statement_begin__ = 51;
                lp_accum__.add(beta_log(get_base1(P1, i, "P1", 1), 0.5, 0.5));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("P0");
        names__.push_back("P1");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(L);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(L);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_p_gl_mix_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        Eigen::Matrix<double, Eigen::Dynamic, 1> P0 = in__.vector_lub_constrain(0, 1, L);
        size_t P0_j_1_max__ = L;
        for (size_t j_1__ = 0; j_1__ < P0_j_1_max__; ++j_1__) {
            vars__.push_back(P0(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> P1 = in__.vector_lub_constrain(0, 1, L);
        size_t P1_j_1_max__ = L;
        for (size_t j_1__ = 0; j_1__ < P1_j_1_max__; ++j_1__) {
            vars__.push_back(P1(j_1__));
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            if (!include_gqs__ && !include_tparams__) return;
            if (!include_gqs__) return;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_p_gl_mix";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t P0_j_1_max__ = L;
        for (size_t j_1__ = 0; j_1__ < P0_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "P0" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t P1_j_1_max__ = L;
        for (size_t j_1__ = 0; j_1__ < P1_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "P1" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t P0_j_1_max__ = L;
        for (size_t j_1__ = 0; j_1__ < P0_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "P0" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t P1_j_1_max__ = L;
        for (size_t j_1__ = 0; j_1__ < P1_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "P1" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
    }
}; // model
}  // namespace
typedef model_p_gl_mix_namespace::model_p_gl_mix stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
