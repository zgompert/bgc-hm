// Generated by rstantools.  Do not edit by hand.

/*
    bgchm is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    bgchm is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with bgchm.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_geocline_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_geocline");
    reader.add_event(55, 53, "end", "model_geocline");
    return reader;
}
#include <stan_meta_header.hpp>
class model_geocline
  : public stan::model::model_base_crtp<model_geocline> {
private:
        int L;
        int N;
        int J;
        std::vector<int> popid;
        std::vector<double> geo;
        std::vector<std::vector<int> > G;
public:
    model_geocline(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_geocline(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_geocline_namespace::model_geocline";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 3;
            context__.validate_dims("data initialization", "L", "int", context__.to_vec());
            L = int(0);
            vals_i__ = context__.vals_i("L");
            pos__ = 0;
            L = vals_i__[pos__++];
            current_statement_begin__ = 4;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            current_statement_begin__ = 5;
            context__.validate_dims("data initialization", "J", "int", context__.to_vec());
            J = int(0);
            vals_i__ = context__.vals_i("J");
            pos__ = 0;
            J = vals_i__[pos__++];
            current_statement_begin__ = 6;
            validate_non_negative_index("popid", "N", N);
            context__.validate_dims("data initialization", "popid", "int", context__.to_vec(N));
            popid = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("popid");
            pos__ = 0;
            size_t popid_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < popid_k_0_max__; ++k_0__) {
                popid[k_0__] = vals_i__[pos__++];
            }
            size_t popid_i_0_max__ = N;
            for (size_t i_0__ = 0; i_0__ < popid_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "popid[i_0__]", popid[i_0__], 0);
            }
            current_statement_begin__ = 7;
            validate_non_negative_index("geo", "J", J);
            context__.validate_dims("data initialization", "geo", "double", context__.to_vec(J));
            geo = std::vector<double>(J, double(0));
            vals_r__ = context__.vals_r("geo");
            pos__ = 0;
            size_t geo_k_0_max__ = J;
            for (size_t k_0__ = 0; k_0__ < geo_k_0_max__; ++k_0__) {
                geo[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 8;
            validate_non_negative_index("G", "N", N);
            validate_non_negative_index("G", "L", L);
            context__.validate_dims("data initialization", "G", "int", context__.to_vec(N,L));
            G = std::vector<std::vector<int> >(N, std::vector<int>(L, int(0)));
            vals_i__ = context__.vals_i("G");
            pos__ = 0;
            size_t G_k_0_max__ = N;
            size_t G_k_1_max__ = L;
            for (size_t k_1__ = 0; k_1__ < G_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < G_k_0_max__; ++k_0__) {
                    G[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            size_t G_i_0_max__ = N;
            size_t G_i_1_max__ = L;
            for (size_t i_0__ = 0; i_0__ < G_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < G_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "G[i_0__][i_1__]", G[i_0__][i_1__], 0);
                    check_less_or_equal(function__, "G[i_0__][i_1__]", G[i_0__][i_1__], 2);
                }
            }
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 12;
            validate_non_negative_index("P", "J", J);
            validate_non_negative_index("P", "L", L);
            num_params_r__ += ((1 * J) * L);
            current_statement_begin__ = 13;
            validate_non_negative_index("slope", "L", L);
            num_params_r__ += L;
            current_statement_begin__ = 14;
            validate_non_negative_index("cent", "L", L);
            num_params_r__ += L;
            current_statement_begin__ = 15;
            num_params_r__ += 1;
            current_statement_begin__ = 16;
            num_params_r__ += 1;
            current_statement_begin__ = 17;
            num_params_r__ += 1;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_geocline() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 12;
        if (!(context__.contains_r("P")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable P missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("P");
        pos__ = 0U;
        validate_non_negative_index("P", "J", J);
        validate_non_negative_index("P", "L", L);
        context__.validate_dims("parameter initialization", "P", "double", context__.to_vec(J,L));
        std::vector<std::vector<double> > P(J, std::vector<double>(L, double(0)));
        size_t P_k_0_max__ = J;
        size_t P_k_1_max__ = L;
        for (size_t k_1__ = 0; k_1__ < P_k_1_max__; ++k_1__) {
            for (size_t k_0__ = 0; k_0__ < P_k_0_max__; ++k_0__) {
                P[k_0__][k_1__] = vals_r__[pos__++];
            }
        }
        size_t P_i_0_max__ = J;
        size_t P_i_1_max__ = L;
        for (size_t i_0__ = 0; i_0__ < P_i_0_max__; ++i_0__) {
            for (size_t i_1__ = 0; i_1__ < P_i_1_max__; ++i_1__) {
                try {
                    writer__.scalar_lub_unconstrain(0, 1, P[i_0__][i_1__]);
                } catch (const std::exception& e) {
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable P: ") + e.what()), current_statement_begin__, prog_reader__());
                }
            }
        }
        current_statement_begin__ = 13;
        if (!(context__.contains_r("slope")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable slope missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("slope");
        pos__ = 0U;
        validate_non_negative_index("slope", "L", L);
        context__.validate_dims("parameter initialization", "slope", "vector_d", context__.to_vec(L));
        Eigen::Matrix<double, Eigen::Dynamic, 1> slope(L);
        size_t slope_j_1_max__ = L;
        for (size_t j_1__ = 0; j_1__ < slope_j_1_max__; ++j_1__) {
            slope(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(slope);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable slope: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 14;
        if (!(context__.contains_r("cent")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable cent missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("cent");
        pos__ = 0U;
        validate_non_negative_index("cent", "L", L);
        context__.validate_dims("parameter initialization", "cent", "vector_d", context__.to_vec(L));
        Eigen::Matrix<double, Eigen::Dynamic, 1> cent(L);
        size_t cent_j_1_max__ = L;
        for (size_t j_1__ = 0; j_1__ < cent_j_1_max__; ++j_1__) {
            cent(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(cent);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable cent: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 15;
        if (!(context__.contains_r("mu")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable mu missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("mu");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "mu", "double", context__.to_vec());
        double mu(0);
        mu = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(mu);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable mu: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 16;
        if (!(context__.contains_r("sigma")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sigma", "double", context__.to_vec());
        double sigma(0);
        sigma = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sigma);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 17;
        if (!(context__.contains_r("serr")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable serr missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("serr");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "serr", "double", context__.to_vec());
        double serr(0);
        serr = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, serr);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable serr: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 12;
            std::vector<std::vector<local_scalar_t__> > P;
            size_t P_d_0_max__ = J;
            size_t P_d_1_max__ = L;
            P.resize(P_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < P_d_0_max__; ++d_0__) {
                P[d_0__].reserve(P_d_1_max__);
                for (size_t d_1__ = 0; d_1__ < P_d_1_max__; ++d_1__) {
                    if (jacobian__)
                        P[d_0__].push_back(in__.scalar_lub_constrain(0, 1, lp__));
                    else
                        P[d_0__].push_back(in__.scalar_lub_constrain(0, 1));
                }
            }
            current_statement_begin__ = 13;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> slope;
            (void) slope;  // dummy to suppress unused var warning
            if (jacobian__)
                slope = in__.vector_constrain(L, lp__);
            else
                slope = in__.vector_constrain(L);
            current_statement_begin__ = 14;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> cent;
            (void) cent;  // dummy to suppress unused var warning
            if (jacobian__)
                cent = in__.vector_constrain(L, lp__);
            else
                cent = in__.vector_constrain(L);
            current_statement_begin__ = 15;
            local_scalar_t__ mu;
            (void) mu;  // dummy to suppress unused var warning
            if (jacobian__)
                mu = in__.scalar_constrain(lp__);
            else
                mu = in__.scalar_constrain();
            current_statement_begin__ = 16;
            local_scalar_t__ sigma;
            (void) sigma;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma = in__.scalar_lb_constrain(0, lp__);
            else
                sigma = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 17;
            local_scalar_t__ serr;
            (void) serr;  // dummy to suppress unused var warning
            if (jacobian__)
                serr = in__.scalar_lb_constrain(0, lp__);
            else
                serr = in__.scalar_lb_constrain(0);
            // transformed parameters
            current_statement_begin__ = 21;
            validate_non_negative_index("w", "L", L);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> w(L);
            stan::math::initialize(w, DUMMY_VAR__);
            stan::math::fill(w, DUMMY_VAR__);
            current_statement_begin__ = 22;
            local_scalar_t__ sdg;
            (void) sdg;  // dummy to suppress unused var warning
            stan::math::initialize(sdg, DUMMY_VAR__);
            stan::math::fill(sdg, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 24;
            for (int i = 1; i <= L; ++i) {
                current_statement_begin__ = 25;
                stan::model::assign(w, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (1 / (0.25 * get_base1(slope, i, "slope", 1))), 
                            "assigning variable w");
            }
            current_statement_begin__ = 27;
            stan::math::assign(sdg, (2 * sd(geo)));
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 21;
            size_t w_j_1_max__ = L;
            for (size_t j_1__ = 0; j_1__ < w_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(w(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: w" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable w: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 22;
            if (stan::math::is_uninitialized(sdg)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: sdg";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable sdg: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            // model body
            current_statement_begin__ = 33;
            for (int i = 1; i <= L; ++i) {
                current_statement_begin__ = 34;
                for (int j = 1; j <= N; ++j) {
                    current_statement_begin__ = 36;
                    lp_accum__.add(binomial_log(get_base1(get_base1(G, j, "G", 1), i, "G", 2), 2, get_base1(get_base1(P, get_base1(popid, j, "popid", 1), "P", 1), i, "P", 2)));
                }
            }
            current_statement_begin__ = 39;
            for (int i = 1; i <= L; ++i) {
                current_statement_begin__ = 40;
                for (int j = 1; j <= J; ++j) {
                    current_statement_begin__ = 42;
                    lp_accum__.add(normal_log(logit(get_base1(get_base1(P, j, "P", 1), i, "P", 2)), (get_base1(cent, i, "cent", 1) + (get_base1(slope, i, "slope", 1) * get_base1(geo, j, "geo", 1))), serr));
                }
            }
            current_statement_begin__ = 46;
            for (int i = 1; i <= L; ++i) {
                current_statement_begin__ = 47;
                lp_accum__.add(normal_log(get_base1(slope, i, "slope", 1), mu, sigma));
                current_statement_begin__ = 48;
                lp_accum__.add(normal_log(get_base1(cent, i, "cent", 1), 0, sdg));
            }
            current_statement_begin__ = 50;
            lp_accum__.add(normal_log(mu, 0, 5));
            current_statement_begin__ = 51;
            lp_accum__.add(gamma_log(sigma, 0.1, 0.01));
            current_statement_begin__ = 52;
            lp_accum__.add(gamma_log(serr, 0.1, 0.01));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("P");
        names__.push_back("slope");
        names__.push_back("cent");
        names__.push_back("mu");
        names__.push_back("sigma");
        names__.push_back("serr");
        names__.push_back("w");
        names__.push_back("sdg");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(J);
        dims__.push_back(L);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(L);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(L);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(L);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_geocline_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        std::vector<std::vector<double> > P;
        size_t P_d_0_max__ = J;
        size_t P_d_1_max__ = L;
        P.resize(P_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < P_d_0_max__; ++d_0__) {
            P[d_0__].reserve(P_d_1_max__);
            for (size_t d_1__ = 0; d_1__ < P_d_1_max__; ++d_1__) {
                P[d_0__].push_back(in__.scalar_lub_constrain(0, 1));
            }
        }
        size_t P_k_0_max__ = J;
        size_t P_k_1_max__ = L;
        for (size_t k_1__ = 0; k_1__ < P_k_1_max__; ++k_1__) {
            for (size_t k_0__ = 0; k_0__ < P_k_0_max__; ++k_0__) {
                vars__.push_back(P[k_0__][k_1__]);
            }
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> slope = in__.vector_constrain(L);
        size_t slope_j_1_max__ = L;
        for (size_t j_1__ = 0; j_1__ < slope_j_1_max__; ++j_1__) {
            vars__.push_back(slope(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> cent = in__.vector_constrain(L);
        size_t cent_j_1_max__ = L;
        for (size_t j_1__ = 0; j_1__ < cent_j_1_max__; ++j_1__) {
            vars__.push_back(cent(j_1__));
        }
        double mu = in__.scalar_constrain();
        vars__.push_back(mu);
        double sigma = in__.scalar_lb_constrain(0);
        vars__.push_back(sigma);
        double serr = in__.scalar_lb_constrain(0);
        vars__.push_back(serr);
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 21;
            validate_non_negative_index("w", "L", L);
            Eigen::Matrix<double, Eigen::Dynamic, 1> w(L);
            stan::math::initialize(w, DUMMY_VAR__);
            stan::math::fill(w, DUMMY_VAR__);
            current_statement_begin__ = 22;
            double sdg;
            (void) sdg;  // dummy to suppress unused var warning
            stan::math::initialize(sdg, DUMMY_VAR__);
            stan::math::fill(sdg, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 24;
            for (int i = 1; i <= L; ++i) {
                current_statement_begin__ = 25;
                stan::model::assign(w, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (1 / (0.25 * get_base1(slope, i, "slope", 1))), 
                            "assigning variable w");
            }
            current_statement_begin__ = 27;
            stan::math::assign(sdg, (2 * sd(geo)));
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            // write transformed parameters
            if (include_tparams__) {
                size_t w_j_1_max__ = L;
                for (size_t j_1__ = 0; j_1__ < w_j_1_max__; ++j_1__) {
                    vars__.push_back(w(j_1__));
                }
                vars__.push_back(sdg);
            }
            if (!include_gqs__) return;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_geocline";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t P_k_0_max__ = J;
        size_t P_k_1_max__ = L;
        for (size_t k_1__ = 0; k_1__ < P_k_1_max__; ++k_1__) {
            for (size_t k_0__ = 0; k_0__ < P_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "P" << '.' << k_0__ + 1 << '.' << k_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t slope_j_1_max__ = L;
        for (size_t j_1__ = 0; j_1__ < slope_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "slope" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t cent_j_1_max__ = L;
        for (size_t j_1__ = 0; j_1__ < cent_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "cent" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "serr";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t w_j_1_max__ = L;
            for (size_t j_1__ = 0; j_1__ < w_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "w" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            param_name_stream__.str(std::string());
            param_name_stream__ << "sdg";
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__) return;
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t P_k_0_max__ = J;
        size_t P_k_1_max__ = L;
        for (size_t k_1__ = 0; k_1__ < P_k_1_max__; ++k_1__) {
            for (size_t k_0__ = 0; k_0__ < P_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "P" << '.' << k_0__ + 1 << '.' << k_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t slope_j_1_max__ = L;
        for (size_t j_1__ = 0; j_1__ < slope_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "slope" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t cent_j_1_max__ = L;
        for (size_t j_1__ = 0; j_1__ < cent_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "cent" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "serr";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t w_j_1_max__ = L;
            for (size_t j_1__ = 0; j_1__ < w_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "w" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            param_name_stream__.str(std::string());
            param_name_stream__ << "sdg";
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__) return;
    }
}; // model
}  // namespace
typedef model_geocline_namespace::model_geocline stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
