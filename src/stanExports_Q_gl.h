// Generated by rstantools.  Do not edit by hand.

/*
    bgchm is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    bgchm is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with bgchm.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_Q_gl_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 37> locations_array__ =
  {" (found before start of program)",
  " (in 'Q_gl', line 20, column 1 to column 23)",
  " (in 'Q_gl', line 35, column 1 to column 31)",
  " (in 'Q_gl', line 37, column 2 to column 33)",
  " (in 'Q_gl', line 36, column 14 to line 38, column 2)",
  " (in 'Q_gl', line 36, column 1 to line 38, column 2)",
  " (in 'Q_gl', line 26, column 3 to column 93)",
  " (in 'Q_gl', line 24, column 15 to line 27, column 3)",
  " (in 'Q_gl', line 24, column 2 to line 27, column 3)",
  " (in 'Q_gl', line 23, column 14 to line 28, column 2)",
  " (in 'Q_gl', line 23, column 1 to line 28, column 2)",
  " (in 'Q_gl', line 31, column 2 to column 54)",
  " (in 'Q_gl', line 29, column 14 to line 32, column 2)",
  " (in 'Q_gl', line 29, column 1 to line 32, column 2)",
  " (in 'Q_gl', line 11, column 1 to column 7)",
  " (in 'Q_gl', line 12, column 1 to column 7)",
  " (in 'Q_gl', line 13, column 7 to column 8)",
  " (in 'Q_gl', line 13, column 10 to column 11)",
  " (in 'Q_gl', line 13, column 1 to column 40)",
  " (in 'Q_gl', line 14, column 7 to column 8)",
  " (in 'Q_gl', line 14, column 10 to column 11)",
  " (in 'Q_gl', line 14, column 1 to column 40)",
  " (in 'Q_gl', line 15, column 7 to column 8)",
  " (in 'Q_gl', line 15, column 10 to column 11)",
  " (in 'Q_gl', line 15, column 1 to column 40)",
  " (in 'Q_gl', line 16, column 26 to column 27)",
  " (in 'Q_gl', line 16, column 1 to column 32)",
  " (in 'Q_gl', line 17, column 26 to column 27)",
  " (in 'Q_gl', line 17, column 1 to column 32)",
  " (in 'Q_gl', line 20, column 7 to column 8)",
  " (in 'Q_gl', line 35, column 26 to column 27)",
  " (in 'Q_gl', line 3, column 2 to column 12)",
  " (in 'Q_gl', line 4, column 2 to column 95)",
  " (in 'Q_gl', line 5, column 2 to column 131)",
  " (in 'Q_gl', line 6, column 5 to column 93)",
  " (in 'Q_gl', line 7, column 2 to column 14)",
  " (in 'Q_gl', line 2, column 92 to line 8, column 2)"};
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, typename T5__, typename T6__, typename T7__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_stan_scalar<T4__>,
                              stan::is_stan_scalar<T5__>,
                              stan::is_stan_scalar<T6__>,
                              stan::is_stan_scalar<T7__>>* = nullptr>
stan::promote_args_t<T0__, T1__, T2__, T3__, T4__,
  stan::promote_args_t<T5__, T6__, T7__>>
calc_lik(const T0__& gl0, const T1__& gl1, const T2__& gl2, const T3__& p0,
         const T4__& p1, const T5__& q11, const T6__& q10, const T7__& q00,
         std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, typename T5__, typename T6__, typename T7__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_stan_scalar<T4__>,
                              stan::is_stan_scalar<T5__>,
                              stan::is_stan_scalar<T6__>,
                              stan::is_stan_scalar<T7__>>*>
stan::promote_args_t<T0__, T1__, T2__, T3__, T4__,
  stan::promote_args_t<T5__, T6__, T7__>>
calc_lik(const T0__& gl0, const T1__& gl1, const T2__& gl2, const T3__& p0,
         const T4__& p1, const T5__& q11, const T6__& q10, const T7__& q00,
         std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__, T4__,
                             stan::promote_args_t<T5__, T6__, T7__>>;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    local_scalar_t__ prob = DUMMY_VAR__;
    current_statement__ = 32;
    prob = (stan::math::log(gl0) +
      stan::math::log(((((q11 * (1 - p1)) * (1 - p1)) + ((q00 * (1 - p0)) *
        (1 - p0))) + ((q10 * (1 - p1)) * (1 - p0)))));
    current_statement__ = 33;
    prob = stan::math::log_sum_exp(prob, (stan::math::log(gl1) +
             stan::math::log(((((((q11 * 2) * (1 - p0)) * p0) + (((q00 * 2) *
               (1 - p1)) * p1)) + ((q10 * (1 - p0)) * p1)) + ((q10 * p0) * (1
               - p1))))));
    current_statement__ = 34;
    prob = stan::math::log_sum_exp(prob, (stan::math::log(gl2) +
             stan::math::log(((((q11 * p1) * p1) + ((q00 * p0) * p0)) + ((q10
               * p1) * p0)))));
    current_statement__ = 35;
    return prob;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
#include <stan_meta_header.hpp>
class model_Q_gl final : public model_base_crtp<model_Q_gl> {
private:
  int L;
  int N;
  std::vector<std::vector<double>> GL0;
  std::vector<std::vector<double>> GL1;
  std::vector<std::vector<double>> GL2;
  Eigen::Matrix<double,-1,1> P0_data__;
  Eigen::Matrix<double,-1,1> P1_data__;
  Eigen::Map<Eigen::Matrix<double,-1,1>> P0{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> P1{nullptr, 0};
public:
  ~model_Q_gl() {}
  model_Q_gl(stan::io::var_context& context__, unsigned int
             random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_Q_gl_namespace::model_Q_gl";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 14;
      context__.validate_dims("data initialization", "L", "int",
        std::vector<size_t>{});
      L = std::numeric_limits<int>::min();
      current_statement__ = 14;
      L = context__.vals_i("L")[(1 - 1)];
      current_statement__ = 15;
      context__.validate_dims("data initialization", "N", "int",
        std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      current_statement__ = 15;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 16;
      stan::math::validate_non_negative_index("GL0", "N", N);
      current_statement__ = 17;
      stan::math::validate_non_negative_index("GL0", "L", L);
      current_statement__ = 18;
      context__.validate_dims("data initialization", "GL0", "double",
        std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(L)});
      GL0 = std::vector<std::vector<double>>(N,
              std::vector<double>(L,
                std::numeric_limits<double>::quiet_NaN()));
      {
        std::vector<local_scalar_t__> GL0_flat__;
        current_statement__ = 18;
        GL0_flat__ = context__.vals_r("GL0");
        current_statement__ = 18;
        pos__ = 1;
        current_statement__ = 18;
        for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
          current_statement__ = 18;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 18;
            stan::model::assign(GL0, GL0_flat__[(pos__ - 1)],
              "assigning variable GL0", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 18;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 18;
      stan::math::check_greater_or_equal(function__, "GL0", GL0, 0);
      current_statement__ = 18;
      stan::math::check_less_or_equal(function__, "GL0", GL0, 2);
      current_statement__ = 19;
      stan::math::validate_non_negative_index("GL1", "N", N);
      current_statement__ = 20;
      stan::math::validate_non_negative_index("GL1", "L", L);
      current_statement__ = 21;
      context__.validate_dims("data initialization", "GL1", "double",
        std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(L)});
      GL1 = std::vector<std::vector<double>>(N,
              std::vector<double>(L,
                std::numeric_limits<double>::quiet_NaN()));
      {
        std::vector<local_scalar_t__> GL1_flat__;
        current_statement__ = 21;
        GL1_flat__ = context__.vals_r("GL1");
        current_statement__ = 21;
        pos__ = 1;
        current_statement__ = 21;
        for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
          current_statement__ = 21;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 21;
            stan::model::assign(GL1, GL1_flat__[(pos__ - 1)],
              "assigning variable GL1", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 21;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 21;
      stan::math::check_greater_or_equal(function__, "GL1", GL1, 0);
      current_statement__ = 21;
      stan::math::check_less_or_equal(function__, "GL1", GL1, 2);
      current_statement__ = 22;
      stan::math::validate_non_negative_index("GL2", "N", N);
      current_statement__ = 23;
      stan::math::validate_non_negative_index("GL2", "L", L);
      current_statement__ = 24;
      context__.validate_dims("data initialization", "GL2", "double",
        std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(L)});
      GL2 = std::vector<std::vector<double>>(N,
              std::vector<double>(L,
                std::numeric_limits<double>::quiet_NaN()));
      {
        std::vector<local_scalar_t__> GL2_flat__;
        current_statement__ = 24;
        GL2_flat__ = context__.vals_r("GL2");
        current_statement__ = 24;
        pos__ = 1;
        current_statement__ = 24;
        for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
          current_statement__ = 24;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 24;
            stan::model::assign(GL2, GL2_flat__[(pos__ - 1)],
              "assigning variable GL2", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 24;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 24;
      stan::math::check_greater_or_equal(function__, "GL2", GL2, 0);
      current_statement__ = 24;
      stan::math::check_less_or_equal(function__, "GL2", GL2, 2);
      current_statement__ = 25;
      stan::math::validate_non_negative_index("P0", "L", L);
      current_statement__ = 26;
      context__.validate_dims("data initialization", "P0", "double",
        std::vector<size_t>{static_cast<size_t>(L)});
      P0_data__ = Eigen::Matrix<double,-1,1>::Constant(L,
                    std::numeric_limits<double>::quiet_NaN());
      new (&P0) Eigen::Map<Eigen::Matrix<double,-1,1>>(P0_data__.data(), L);
      {
        std::vector<local_scalar_t__> P0_flat__;
        current_statement__ = 26;
        P0_flat__ = context__.vals_r("P0");
        current_statement__ = 26;
        pos__ = 1;
        current_statement__ = 26;
        for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
          current_statement__ = 26;
          stan::model::assign(P0, P0_flat__[(pos__ - 1)],
            "assigning variable P0", stan::model::index_uni(sym1__));
          current_statement__ = 26;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 26;
      stan::math::check_greater_or_equal(function__, "P0", P0, 0);
      current_statement__ = 26;
      stan::math::check_less_or_equal(function__, "P0", P0, 1);
      current_statement__ = 27;
      stan::math::validate_non_negative_index("P1", "L", L);
      current_statement__ = 28;
      context__.validate_dims("data initialization", "P1", "double",
        std::vector<size_t>{static_cast<size_t>(L)});
      P1_data__ = Eigen::Matrix<double,-1,1>::Constant(L,
                    std::numeric_limits<double>::quiet_NaN());
      new (&P1) Eigen::Map<Eigen::Matrix<double,-1,1>>(P1_data__.data(), L);
      {
        std::vector<local_scalar_t__> P1_flat__;
        current_statement__ = 28;
        P1_flat__ = context__.vals_r("P1");
        current_statement__ = 28;
        pos__ = 1;
        current_statement__ = 28;
        for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
          current_statement__ = 28;
          stan::model::assign(P1, P1_flat__[(pos__ - 1)],
            "assigning variable P1", stan::model::index_uni(sym1__));
          current_statement__ = 28;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 28;
      stan::math::check_greater_or_equal(function__, "P1", P1, 0);
      current_statement__ = 28;
      stan::math::check_less_or_equal(function__, "P1", P1, 1);
      current_statement__ = 29;
      stan::math::validate_non_negative_index("Q", "N", N);
      current_statement__ = 30;
      stan::math::validate_non_negative_index("H", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = (N * (3 - 1));
  }
  inline std::string model_name() const final {
    return "model_Q_gl";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_Q_gl_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> Q =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(N,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(3, DUMMY_VAR__));
      current_statement__ = 1;
      Q = in__.template read_constrain_simplex<
            std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>,
            jacobian__>(lp__, N, 3);
      {
        current_statement__ = 10;
        for (int i = 1; i <= L; ++i) {
          current_statement__ = 8;
          for (int j = 1; j <= N; ++j) {
            current_statement__ = 6;
            lp_accum__.add(calc_lik(
                             stan::model::rvalue(GL0, "GL0",
                               stan::model::index_uni(j),
                               stan::model::index_uni(i)),
                             stan::model::rvalue(GL1, "GL1",
                               stan::model::index_uni(j),
                               stan::model::index_uni(i)),
                             stan::model::rvalue(GL2, "GL2",
                               stan::model::index_uni(j),
                               stan::model::index_uni(i)),
                             stan::model::rvalue(P0, "P0",
                               stan::model::index_uni(i)),
                             stan::model::rvalue(P1, "P1",
                               stan::model::index_uni(i)),
                             stan::model::rvalue(
                               stan::model::rvalue(Q, "Q",
                                 stan::model::index_uni(j)), "Q[j]",
                               stan::model::index_uni(1)),
                             stan::model::rvalue(
                               stan::model::rvalue(Q, "Q",
                                 stan::model::index_uni(j)), "Q[j]",
                               stan::model::index_uni(2)),
                             stan::model::rvalue(
                               stan::model::rvalue(Q, "Q",
                                 stan::model::index_uni(j)), "Q[j]",
                               stan::model::index_uni(3)), pstream__));
          }
        }
        current_statement__ = 13;
        for (int j = 1; j <= N; ++j) {
          current_statement__ = 11;
          lp_accum__.add(stan::math::dirichlet_lpdf<false>(
                           stan::model::rvalue(Q, "Q",
                             stan::model::index_uni(j)),
                           stan::math::rep_vector(0.5, 3)));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_Q_gl_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      std::vector<Eigen::Matrix<double,-1,1>> Q =
        std::vector<Eigen::Matrix<double,-1,1>>(N,
          Eigen::Matrix<double,-1,1>::Constant(3,
            std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 1;
      Q = in__.template read_constrain_simplex<
            std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>,
            jacobian__>(lp__, N, 3);
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          out__.write(Q[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      Eigen::Matrix<double,-1,1> H =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 5;
      for (int j = 1; j <= N; ++j) {
        current_statement__ = 3;
        stan::model::assign(H,
          (stan::model::rvalue(
             stan::model::rvalue(Q, "Q", stan::model::index_uni(j)), "Q[j]",
             stan::model::index_uni(1)) + (0.5 *
          stan::model::rvalue(
            stan::model::rvalue(Q, "Q", stan::model::index_uni(j)), "Q[j]",
            stan::model::index_uni(2)))), "assigning variable H",
          stan::model::index_uni(j));
      }
      current_statement__ = 2;
      stan::math::check_greater_or_equal(function__, "H", H, 0);
      current_statement__ = 2;
      stan::math::check_less_or_equal(function__, "H", H, 1);
      out__.write(H);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> Q =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(N,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(3, DUMMY_VAR__));
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        current_statement__ = 1;
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          current_statement__ = 1;
          stan::model::assign(Q, in__.read<local_scalar_t__>(),
            "assigning variable Q", stan::model::index_uni(sym2__),
            stan::model::index_uni(sym1__));
        }
      }
      out__.write_free_simplex(Q);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "Q", "double",
        std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(3)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> Q =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(N,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(3, DUMMY_VAR__));
      {
        std::vector<local_scalar_t__> Q_flat__;
        current_statement__ = 1;
        Q_flat__ = context__.vals_r("Q");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
          current_statement__ = 1;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 1;
            stan::model::assign(Q, Q_flat__[(pos__ - 1)],
              "assigning variable Q", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 1;
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write_free_simplex(Q);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"Q"};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      std::vector<std::string> temp{"H"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(N),
                                                 static_cast<size_t>(3)}};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(N)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
        param_names__.emplace_back(std::string() + "Q" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "H" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= (3 - 1); ++sym1__) {
      for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
        param_names__.emplace_back(std::string() + "Q" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "H" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"Q\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(3) + "}},\"block\":\"parameters\"},{\"name\":\"H\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"Q\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string((3 -1)) + "}},\"block\":\"parameters\"},{\"name\":\"H\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (N * 3);
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (N);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (N * 3);
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (N);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_Q_gl_namespace::model_Q_gl;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_Q_gl_namespace::profiles__;
}
#endif
#endif
