// Generated by rstantools.  Do not edit by hand.

/*
    bgchm is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    bgchm is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with bgchm.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_Q_mix_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_Q_mix");
    reader.add_event(60, 58, "end", "model_Q_mix");
    return reader;
}
template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__>::type>::type
calc_lik(const T0__& g,
             const T1__& p0,
             const T2__& p1,
             const T3__& q11,
             const T4__& q10,
             const T5__& q00,
             const T6__& pl, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 3;
        local_scalar_t__ prob(DUMMY_VAR__);
        (void) prob;  // dummy to suppress unused var warning
        stan::math::initialize(prob, DUMMY_VAR__);
        stan::math::fill(prob, DUMMY_VAR__);
        current_statement_begin__ = 4;
        if (as_bool(logical_eq(pl, 2))) {
            current_statement_begin__ = 5;
            if (as_bool(logical_eq(g, 0))) {
                current_statement_begin__ = 6;
                stan::math::assign(prob, stan::math::log(((((q11 * (1 - p1)) * (1 - p1)) + ((q00 * (1 - p0)) * (1 - p0))) + ((q10 * (1 - p1)) * (1 - p0)))));
            } else if (as_bool(logical_eq(g, 1))) {
                current_statement_begin__ = 8;
                stan::math::assign(prob, stan::math::log(((((((q11 * 2) * (1 - p0)) * p0) + (((q00 * 2) * (1 - p1)) * p1)) + ((q10 * (1 - p0)) * p1)) + ((q10 * p0) * (1 - p1)))));
            } else {
                current_statement_begin__ = 10;
                stan::math::assign(prob, stan::math::log(((((q11 * p1) * p1) + ((q00 * p0) * p0)) + ((q10 * p1) * p0))));
            }
        } else if (as_bool(logical_eq(pl, 1))) {
            current_statement_begin__ = 12;
            if (as_bool(logical_eq(g, 0))) {
                current_statement_begin__ = 13;
                stan::math::assign(prob, stan::math::log(((((q11 * (1 - p1)) + (q00 * (1 - p0))) + ((0.5 * q10) * (1 - p1))) + ((0.5 * q10) * (1 - p0)))));
            } else {
                current_statement_begin__ = 15;
                stan::math::assign(prob, stan::math::log(((((q11 * p1) + (q00 * p0)) + ((0.5 * q10) * p1)) + ((0.5 * q10) * p0))));
            }
        } else {
            current_statement_begin__ = 18;
            stan::math::assign(prob, 0);
        }
        current_statement_begin__ = 20;
        return stan::math::promote_scalar<fun_return_scalar_t__>(prob);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct calc_lik_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__>::type>::type
    operator()(const T0__& g,
             const T1__& p0,
             const T2__& p1,
             const T3__& q11,
             const T4__& q10,
             const T5__& q00,
             const T6__& pl, std::ostream* pstream__) const {
        return calc_lik(g, p0, p1, q11, q10, q00, pl, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_Q_mix
  : public stan::model::model_base_crtp<model_Q_mix> {
private:
        int L;
        int N;
        std::vector<std::vector<int> > G;
        std::vector<std::vector<double> > ploidy;
        vector_d P0;
        vector_d P1;
public:
    model_Q_mix(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_Q_mix(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_Q_mix_namespace::model_Q_mix";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 25;
            context__.validate_dims("data initialization", "L", "int", context__.to_vec());
            L = int(0);
            vals_i__ = context__.vals_i("L");
            pos__ = 0;
            L = vals_i__[pos__++];
            current_statement_begin__ = 26;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            current_statement_begin__ = 27;
            validate_non_negative_index("G", "N", N);
            validate_non_negative_index("G", "L", L);
            context__.validate_dims("data initialization", "G", "int", context__.to_vec(N,L));
            G = std::vector<std::vector<int> >(N, std::vector<int>(L, int(0)));
            vals_i__ = context__.vals_i("G");
            pos__ = 0;
            size_t G_k_0_max__ = N;
            size_t G_k_1_max__ = L;
            for (size_t k_1__ = 0; k_1__ < G_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < G_k_0_max__; ++k_0__) {
                    G[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            size_t G_i_0_max__ = N;
            size_t G_i_1_max__ = L;
            for (size_t i_0__ = 0; i_0__ < G_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < G_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "G[i_0__][i_1__]", G[i_0__][i_1__], 0);
                    check_less_or_equal(function__, "G[i_0__][i_1__]", G[i_0__][i_1__], 2);
                }
            }
            current_statement_begin__ = 28;
            validate_non_negative_index("ploidy", "N", N);
            validate_non_negative_index("ploidy", "L", L);
            context__.validate_dims("data initialization", "ploidy", "double", context__.to_vec(N,L));
            ploidy = std::vector<std::vector<double> >(N, std::vector<double>(L, double(0)));
            vals_r__ = context__.vals_r("ploidy");
            pos__ = 0;
            size_t ploidy_k_0_max__ = N;
            size_t ploidy_k_1_max__ = L;
            for (size_t k_1__ = 0; k_1__ < ploidy_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < ploidy_k_0_max__; ++k_0__) {
                    ploidy[k_0__][k_1__] = vals_r__[pos__++];
                }
            }
            size_t ploidy_i_0_max__ = N;
            size_t ploidy_i_1_max__ = L;
            for (size_t i_0__ = 0; i_0__ < ploidy_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < ploidy_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "ploidy[i_0__][i_1__]", ploidy[i_0__][i_1__], 0);
                    check_less_or_equal(function__, "ploidy[i_0__][i_1__]", ploidy[i_0__][i_1__], 2);
                }
            }
            current_statement_begin__ = 29;
            validate_non_negative_index("P0", "L", L);
            context__.validate_dims("data initialization", "P0", "vector_d", context__.to_vec(L));
            P0 = Eigen::Matrix<double, Eigen::Dynamic, 1>(L);
            vals_r__ = context__.vals_r("P0");
            pos__ = 0;
            size_t P0_j_1_max__ = L;
            for (size_t j_1__ = 0; j_1__ < P0_j_1_max__; ++j_1__) {
                P0(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "P0", P0, 0);
            check_less_or_equal(function__, "P0", P0, 1);
            current_statement_begin__ = 30;
            validate_non_negative_index("P1", "L", L);
            context__.validate_dims("data initialization", "P1", "vector_d", context__.to_vec(L));
            P1 = Eigen::Matrix<double, Eigen::Dynamic, 1>(L);
            vals_r__ = context__.vals_r("P1");
            pos__ = 0;
            size_t P1_j_1_max__ = L;
            for (size_t j_1__ = 0; j_1__ < P1_j_1_max__; ++j_1__) {
                P1(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "P1", P1, 0);
            check_less_or_equal(function__, "P1", P1, 1);
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 34;
            validate_non_negative_index("Q", "3", 3);
            validate_non_negative_index("Q", "N", N);
            num_params_r__ += ((3 - 1) * N);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_Q_mix() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 34;
        if (!(context__.contains_r("Q")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable Q missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("Q");
        pos__ = 0U;
        validate_non_negative_index("Q", "3", 3);
        validate_non_negative_index("Q", "N", N);
        context__.validate_dims("parameter initialization", "Q", "vector_d", context__.to_vec(N,3));
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > Q(N, Eigen::Matrix<double, Eigen::Dynamic, 1>(3));
        size_t Q_j_1_max__ = 3;
        size_t Q_k_0_max__ = N;
        for (size_t j_1__ = 0; j_1__ < Q_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < Q_k_0_max__; ++k_0__) {
                Q[k_0__](j_1__) = vals_r__[pos__++];
            }
        }
        size_t Q_i_0_max__ = N;
        for (size_t i_0__ = 0; i_0__ < Q_i_0_max__; ++i_0__) {
            try {
                writer__.simplex_unconstrain(Q[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable Q: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 34;
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > Q;
            size_t Q_d_0_max__ = N;
            Q.reserve(Q_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < Q_d_0_max__; ++d_0__) {
                if (jacobian__)
                    Q.push_back(in__.simplex_constrain(3, lp__));
                else
                    Q.push_back(in__.simplex_constrain(3));
            }
            // model body
            current_statement_begin__ = 39;
            for (int i = 1; i <= L; ++i) {
                current_statement_begin__ = 40;
                for (int j = 1; j <= N; ++j) {
                    current_statement_begin__ = 42;
                    lp_accum__.add(calc_lik(get_base1(get_base1(G, j, "G", 1), i, "G", 2), get_base1(P0, i, "P0", 1), get_base1(P1, i, "P1", 1), get_base1(get_base1(Q, j, "Q", 1), 1, "Q", 2), get_base1(get_base1(Q, j, "Q", 1), 2, "Q", 2), get_base1(get_base1(Q, j, "Q", 1), 3, "Q", 2), get_base1(get_base1(ploidy, j, "ploidy", 1), i, "ploidy", 2), pstream__));
                }
            }
            current_statement_begin__ = 45;
            for (int j = 1; j <= N; ++j) {
                current_statement_begin__ = 47;
                lp_accum__.add(dirichlet_log(get_base1(Q, j, "Q", 1), rep_vector(0.5, 3)));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("Q");
        names__.push_back("H");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(N);
        dims__.push_back(3);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_Q_mix_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > Q;
        size_t Q_d_0_max__ = N;
        Q.reserve(Q_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < Q_d_0_max__; ++d_0__) {
            Q.push_back(in__.simplex_constrain(3));
        }
        size_t Q_j_1_max__ = 3;
        size_t Q_k_0_max__ = N;
        for (size_t j_1__ = 0; j_1__ < Q_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < Q_k_0_max__; ++k_0__) {
                vars__.push_back(Q[k_0__](j_1__));
            }
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            if (!include_gqs__ && !include_tparams__) return;
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 53;
            validate_non_negative_index("H", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> H(N);
            stan::math::initialize(H, DUMMY_VAR__);
            stan::math::fill(H, DUMMY_VAR__);
            // generated quantities statements
            current_statement_begin__ = 55;
            for (int j = 1; j <= N; ++j) {
                current_statement_begin__ = 56;
                stan::model::assign(H, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            (get_base1(get_base1(Q, j, "Q", 1), 1, "Q", 2) + (0.5 * get_base1(get_base1(Q, j, "Q", 1), 2, "Q", 2))), 
                            "assigning variable H");
            }
            // validate, write generated quantities
            current_statement_begin__ = 53;
            check_greater_or_equal(function__, "H", H, 0);
            check_less_or_equal(function__, "H", H, 1);
            size_t H_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < H_j_1_max__; ++j_1__) {
                vars__.push_back(H(j_1__));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_Q_mix";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t Q_j_1_max__ = 3;
        size_t Q_k_0_max__ = N;
        for (size_t j_1__ = 0; j_1__ < Q_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < Q_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Q" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
        size_t H_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < H_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "H" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t Q_j_1_max__ = (3 - 1);
        size_t Q_k_0_max__ = N;
        for (size_t j_1__ = 0; j_1__ < Q_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < Q_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Q" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
        size_t H_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < H_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "H" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
}; // model
}  // namespace
typedef model_Q_mix_namespace::model_Q_mix stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
