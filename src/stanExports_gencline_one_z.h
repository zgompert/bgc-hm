// Generated by rstantools.  Do not edit by hand.

/*
    bgchm is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    bgchm is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with bgchm.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_gencline_one_z_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_gencline_one_z");
    reader.add_event(52, 50, "end", "model_gencline_one_z");
    return reader;
}
template <typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
calc_phi(const T0__& h,
             const T1__& vv,
             const T2__& uu, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 3;
        local_scalar_t__ phi(DUMMY_VAR__);
        (void) phi;  // dummy to suppress unused var warning
        stan::math::initialize(phi, DUMMY_VAR__);
        stan::math::fill(phi, DUMMY_VAR__);
        current_statement_begin__ = 4;
        stan::math::assign(phi, (pow(h, vv) / (pow(h, vv) + (pow((1 - h), vv) * stan::math::exp(uu)))));
        current_statement_begin__ = 5;
        return stan::math::promote_scalar<fun_return_scalar_t__>(phi);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct calc_phi_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
    operator()(const T0__& h,
             const T1__& vv,
             const T2__& uu, std::ostream* pstream__) const {
        return calc_phi(h, vv, uu, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
calc_lik(const T0__& z,
             const T1__& h,
             const T2__& vv,
             const T3__& uu, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 8;
        local_scalar_t__ prob(DUMMY_VAR__);
        (void) prob;  // dummy to suppress unused var warning
        stan::math::initialize(prob, DUMMY_VAR__);
        stan::math::fill(prob, DUMMY_VAR__);
        current_statement_begin__ = 9;
        local_scalar_t__ phi(DUMMY_VAR__);
        (void) phi;  // dummy to suppress unused var warning
        stan::math::initialize(phi, DUMMY_VAR__);
        stan::math::fill(phi, DUMMY_VAR__);
        current_statement_begin__ = 10;
        stan::math::assign(phi, calc_phi(h, vv, uu, pstream__));
        current_statement_begin__ = 11;
        if (as_bool(logical_eq(z, 0))) {
            current_statement_begin__ = 12;
            stan::math::assign(prob, (stan::math::log((1 - phi)) + stan::math::log((1 - phi))));
        } else if (as_bool(logical_eq(z, 1))) {
            current_statement_begin__ = 14;
            stan::math::assign(prob, ((stan::math::log(2) + stan::math::log(phi)) + stan::math::log((1 - phi))));
        } else {
            current_statement_begin__ = 16;
            stan::math::assign(prob, (stan::math::log(phi) + stan::math::log(phi)));
        }
        current_statement_begin__ = 17;
        return stan::math::promote_scalar<fun_return_scalar_t__>(prob);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct calc_lik_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
    operator()(const T0__& z,
             const T1__& h,
             const T2__& vv,
             const T3__& uu, std::ostream* pstream__) const {
        return calc_lik(z, h, vv, uu, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_gencline_one_z
  : public stan::model::model_base_crtp<model_gencline_one_z> {
private:
        int L;
        int N;
        std::vector<double> Z;
        vector_d H;
        double sc;
        double sv;
public:
    model_gencline_one_z(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_gencline_one_z(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_gencline_one_z_namespace::model_gencline_one_z";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 22;
            context__.validate_dims("data initialization", "L", "int", context__.to_vec());
            L = int(0);
            vals_i__ = context__.vals_i("L");
            pos__ = 0;
            L = vals_i__[pos__++];
            current_statement_begin__ = 23;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            current_statement_begin__ = 24;
            validate_non_negative_index("Z", "N", N);
            context__.validate_dims("data initialization", "Z", "double", context__.to_vec(N));
            Z = std::vector<double>(N, double(0));
            vals_r__ = context__.vals_r("Z");
            pos__ = 0;
            size_t Z_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < Z_k_0_max__; ++k_0__) {
                Z[k_0__] = vals_r__[pos__++];
            }
            size_t Z_i_0_max__ = N;
            for (size_t i_0__ = 0; i_0__ < Z_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "Z[i_0__]", Z[i_0__], 0);
                check_less_or_equal(function__, "Z[i_0__]", Z[i_0__], 2);
            }
            current_statement_begin__ = 25;
            validate_non_negative_index("H", "N", N);
            context__.validate_dims("data initialization", "H", "vector_d", context__.to_vec(N));
            H = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            vals_r__ = context__.vals_r("H");
            pos__ = 0;
            size_t H_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < H_j_1_max__; ++j_1__) {
                H(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "H", H, 0);
            check_less_or_equal(function__, "H", H, 1);
            current_statement_begin__ = 26;
            context__.validate_dims("data initialization", "sc", "double", context__.to_vec());
            sc = double(0);
            vals_r__ = context__.vals_r("sc");
            pos__ = 0;
            sc = vals_r__[pos__++];
            check_greater_or_equal(function__, "sc", sc, 0);
            current_statement_begin__ = 27;
            context__.validate_dims("data initialization", "sv", "double", context__.to_vec());
            sv = double(0);
            vals_r__ = context__.vals_r("sv");
            pos__ = 0;
            sv = vals_r__[pos__++];
            check_greater_or_equal(function__, "sv", sv, 0);
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 31;
            num_params_r__ += 1;
            current_statement_begin__ = 32;
            num_params_r__ += 1;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_gencline_one_z() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 31;
        if (!(context__.contains_r("center")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable center missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("center");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "center", "double", context__.to_vec());
        double center(0);
        center = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(0.001, 0.999, center);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable center: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 32;
        if (!(context__.contains_r("v")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable v missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("v");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "v", "double", context__.to_vec());
        double v(0);
        v = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(0.1, 10, v);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable v: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 31;
            local_scalar_t__ center;
            (void) center;  // dummy to suppress unused var warning
            if (jacobian__)
                center = in__.scalar_lub_constrain(0.001, 0.999, lp__);
            else
                center = in__.scalar_lub_constrain(0.001, 0.999);
            current_statement_begin__ = 32;
            local_scalar_t__ v;
            (void) v;  // dummy to suppress unused var warning
            if (jacobian__)
                v = in__.scalar_lub_constrain(0.1, 10, lp__);
            else
                v = in__.scalar_lub_constrain(0.1, 10);
            // transformed parameters
            current_statement_begin__ = 36;
            local_scalar_t__ u;
            (void) u;  // dummy to suppress unused var warning
            stan::math::initialize(u, DUMMY_VAR__);
            stan::math::fill(u, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 37;
            stan::math::assign(u, (logit(center) * v));
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 36;
            if (stan::math::is_uninitialized(u)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: u";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable u: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            check_greater_or_equal(function__, "u", u, -(100));
            check_less_or_equal(function__, "u", u, 100);
            // model body
            current_statement_begin__ = 42;
            for (int j = 1; j <= N; ++j) {
                current_statement_begin__ = 44;
                lp_accum__.add(calc_lik(get_base1(Z, j, "Z", 1), get_base1(H, j, "H", 1), v, u, pstream__));
            }
            current_statement_begin__ = 48;
            lp_accum__.add(normal_log(logit(center), 0, sc));
            current_statement_begin__ = 49;
            lp_accum__.add(normal_log(stan::math::log10(v), 0, sv));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("center");
        names__.push_back("v");
        names__.push_back("u");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_gencline_one_z_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double center = in__.scalar_lub_constrain(0.001, 0.999);
        vars__.push_back(center);
        double v = in__.scalar_lub_constrain(0.1, 10);
        vars__.push_back(v);
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 36;
            double u;
            (void) u;  // dummy to suppress unused var warning
            stan::math::initialize(u, DUMMY_VAR__);
            stan::math::fill(u, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 37;
            stan::math::assign(u, (logit(center) * v));
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 36;
            check_greater_or_equal(function__, "u", u, -(100));
            check_less_or_equal(function__, "u", u, 100);
            // write transformed parameters
            if (include_tparams__) {
                vars__.push_back(u);
            }
            if (!include_gqs__) return;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_gencline_one_z";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "center";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "v";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "u";
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__) return;
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "center";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "v";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "u";
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__) return;
    }
}; // model
}  // namespace
typedef model_gencline_one_z_namespace::model_gencline_one_z stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
