// Generated by rstantools.  Do not edit by hand.

/*
    bgchm is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    bgchm is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with bgchm.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.26.1-4-gd72b68b7-dirty
#include <stan/model/model_header.hpp>
namespace model_hi_gl_namespace {
inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 
stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'hi_gl', line 20, column 1 to column 31)",
                                                      " (in 'hi_gl', line 26, column 3 to column 72)",
                                                      " (in 'hi_gl', line 24, column 15 to line 27, column 3)",
                                                      " (in 'hi_gl', line 24, column 2 to line 27, column 3)",
                                                      " (in 'hi_gl', line 23, column 14 to line 28, column 2)",
                                                      " (in 'hi_gl', line 23, column 1 to line 28, column 2)",
                                                      " (in 'hi_gl', line 31, column 2 to column 39)",
                                                      " (in 'hi_gl', line 29, column 14 to line 32, column 2)",
                                                      " (in 'hi_gl', line 29, column 1 to line 32, column 2)",
                                                      " (in 'hi_gl', line 11, column 1 to column 7)",
                                                      " (in 'hi_gl', line 12, column 1 to column 7)",
                                                      " (in 'hi_gl', line 13, column 28 to column 29)",
                                                      " (in 'hi_gl', line 13, column 31 to column 32)",
                                                      " (in 'hi_gl', line 13, column 1 to column 34)",
                                                      " (in 'hi_gl', line 14, column 28 to column 29)",
                                                      " (in 'hi_gl', line 14, column 31 to column 32)",
                                                      " (in 'hi_gl', line 14, column 1 to column 34)",
                                                      " (in 'hi_gl', line 15, column 28 to column 29)",
                                                      " (in 'hi_gl', line 15, column 31 to column 32)",
                                                      " (in 'hi_gl', line 15, column 1 to column 34)",
                                                      " (in 'hi_gl', line 16, column 26 to column 27)",
                                                      " (in 'hi_gl', line 16, column 1 to column 32)",
                                                      " (in 'hi_gl', line 17, column 26 to column 27)",
                                                      " (in 'hi_gl', line 17, column 1 to column 32)",
                                                      " (in 'hi_gl', line 20, column 26 to column 27)",
                                                      " (in 'hi_gl', line 3, column 2 to column 12)",
                                                      " (in 'hi_gl', line 4, column 2 to column 88)",
                                                      " (in 'hi_gl', line 5, column 2 to column 108)",
                                                      " (in 'hi_gl', line 6, column 2 to column 91)",
                                                      " (in 'hi_gl', line 7, column 2 to column 14)",
                                                      " (in 'hi_gl', line 2, column 70 to line 8, column 2)"};
template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__>
stan::promote_args_t<T0__, T1__, T2__, T3__,
T4__, stan::promote_args_t<T5__>>
calc_lik(const T0__& gl0, const T1__& gl1, const T2__& gl2, const T3__& p0,
         const T4__& p1, const T5__& h, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
          T1__,
          T2__,
          T3__,
          T4__, stan::promote_args_t<T5__>>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    local_scalar_t__ prob;
    prob = DUMMY_VAR__;
    
    current_statement__ = 27;
    prob = ((stan::math::log(gl0) +
              stan::math::log(((h * (1 - p1)) + ((1 - h) * (1 - p0))))) +
             stan::math::log(((h * (1 - p1)) + ((1 - h) * (1 - p0)))));
    current_statement__ = 28;
    prob = log_sum_exp(prob,
             (((stan::math::log(gl1) + stan::math::log(2)) +
                stan::math::log(((h * (1 - p1)) + ((1 - h) * (1 - p0))))) +
               stan::math::log(((h * p1) + ((1 - h) * p0)))));
    current_statement__ = 29;
    prob = log_sum_exp(prob,
             ((stan::math::log(gl2) +
                stan::math::log(((h * p1) + ((1 - h) * p0)))) +
               stan::math::log(((h * p1) + ((1 - h) * p0)))));
    current_statement__ = 30;
    return prob;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct calc_lik_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__>
stan::promote_args_t<T0__, T1__, T2__, T3__,
T4__, stan::promote_args_t<T5__>>
operator()(const T0__& gl0, const T1__& gl1, const T2__& gl2, const T3__& p0,
           const T4__& p1, const T5__& h, std::ostream* pstream__)  const 
{
return calc_lik(gl0, gl1, gl2, p0, p1, h, pstream__);
}
};
#include <stan_meta_header.hpp>
class model_hi_gl final : public model_base_crtp<model_hi_gl> {
private:
  int L;
  int N;
  std::vector<std::vector<double>> GL0;
  std::vector<std::vector<double>> GL1;
  std::vector<std::vector<double>> GL2;
  Eigen::Matrix<double, -1, 1> P0;
  Eigen::Matrix<double, -1, 1> P1;
 
public:
  ~model_hi_gl() { }
  
  inline std::string model_name() const final { return "model_hi_gl"; }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.26.1-4-gd72b68b7-dirty", "stancflags = "};
  }
  
  
  model_hi_gl(stan::io::var_context& context__,
              unsigned int random_seed__ = 0,
              std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "model_hi_gl_namespace::model_hi_gl";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 10;
      context__.validate_dims("data initialization","L","int",
          context__.to_vec());
      L = std::numeric_limits<int>::min();
      
      current_statement__ = 10;
      L = context__.vals_i("L")[(1 - 1)];
      current_statement__ = 11;
      context__.validate_dims("data initialization","N","int",
          context__.to_vec());
      N = std::numeric_limits<int>::min();
      
      current_statement__ = 11;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 12;
      validate_non_negative_index("GL0", "N", N);
      current_statement__ = 13;
      validate_non_negative_index("GL0", "L", L);
      current_statement__ = 14;
      context__.validate_dims("data initialization","GL0","double",
          context__.to_vec(N, L));
      GL0 = std::vector<std::vector<double>>(N, std::vector<double>(L, std::numeric_limits<double>::quiet_NaN()));
      
      {
        std::vector<local_scalar_t__> GL0_flat__;
        current_statement__ = 14;
        assign(GL0_flat__, nil_index_list(), context__.vals_r("GL0"),
          "assigning variable GL0_flat__");
        current_statement__ = 14;
        pos__ = 1;
        current_statement__ = 14;
        for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
          current_statement__ = 14;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 14;
            assign(GL0,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              GL0_flat__[(pos__ - 1)], "assigning variable GL0");
            current_statement__ = 14;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 14;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 14;
        for (int sym2__ = 1; sym2__ <= L; ++sym2__) {
          current_statement__ = 14;
          current_statement__ = 14;
          check_greater_or_equal(function__, "GL0[sym1__, sym2__]",
                                 GL0[(sym1__ - 1)][(sym2__ - 1)], 0);}}
      current_statement__ = 14;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 14;
        for (int sym2__ = 1; sym2__ <= L; ++sym2__) {
          current_statement__ = 14;
          current_statement__ = 14;
          check_less_or_equal(function__, "GL0[sym1__, sym2__]",
                              GL0[(sym1__ - 1)][(sym2__ - 1)], 2);}}
      current_statement__ = 15;
      validate_non_negative_index("GL1", "N", N);
      current_statement__ = 16;
      validate_non_negative_index("GL1", "L", L);
      current_statement__ = 17;
      context__.validate_dims("data initialization","GL1","double",
          context__.to_vec(N, L));
      GL1 = std::vector<std::vector<double>>(N, std::vector<double>(L, std::numeric_limits<double>::quiet_NaN()));
      
      {
        std::vector<local_scalar_t__> GL1_flat__;
        current_statement__ = 17;
        assign(GL1_flat__, nil_index_list(), context__.vals_r("GL1"),
          "assigning variable GL1_flat__");
        current_statement__ = 17;
        pos__ = 1;
        current_statement__ = 17;
        for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
          current_statement__ = 17;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 17;
            assign(GL1,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              GL1_flat__[(pos__ - 1)], "assigning variable GL1");
            current_statement__ = 17;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 17;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 17;
        for (int sym2__ = 1; sym2__ <= L; ++sym2__) {
          current_statement__ = 17;
          current_statement__ = 17;
          check_greater_or_equal(function__, "GL1[sym1__, sym2__]",
                                 GL1[(sym1__ - 1)][(sym2__ - 1)], 0);}}
      current_statement__ = 17;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 17;
        for (int sym2__ = 1; sym2__ <= L; ++sym2__) {
          current_statement__ = 17;
          current_statement__ = 17;
          check_less_or_equal(function__, "GL1[sym1__, sym2__]",
                              GL1[(sym1__ - 1)][(sym2__ - 1)], 2);}}
      current_statement__ = 18;
      validate_non_negative_index("GL2", "N", N);
      current_statement__ = 19;
      validate_non_negative_index("GL2", "L", L);
      current_statement__ = 20;
      context__.validate_dims("data initialization","GL2","double",
          context__.to_vec(N, L));
      GL2 = std::vector<std::vector<double>>(N, std::vector<double>(L, std::numeric_limits<double>::quiet_NaN()));
      
      {
        std::vector<local_scalar_t__> GL2_flat__;
        current_statement__ = 20;
        assign(GL2_flat__, nil_index_list(), context__.vals_r("GL2"),
          "assigning variable GL2_flat__");
        current_statement__ = 20;
        pos__ = 1;
        current_statement__ = 20;
        for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
          current_statement__ = 20;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 20;
            assign(GL2,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              GL2_flat__[(pos__ - 1)], "assigning variable GL2");
            current_statement__ = 20;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 20;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 20;
        for (int sym2__ = 1; sym2__ <= L; ++sym2__) {
          current_statement__ = 20;
          current_statement__ = 20;
          check_greater_or_equal(function__, "GL2[sym1__, sym2__]",
                                 GL2[(sym1__ - 1)][(sym2__ - 1)], 0);}}
      current_statement__ = 20;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 20;
        for (int sym2__ = 1; sym2__ <= L; ++sym2__) {
          current_statement__ = 20;
          current_statement__ = 20;
          check_less_or_equal(function__, "GL2[sym1__, sym2__]",
                              GL2[(sym1__ - 1)][(sym2__ - 1)], 2);}}
      current_statement__ = 21;
      validate_non_negative_index("P0", "L", L);
      current_statement__ = 22;
      context__.validate_dims("data initialization","P0","double",
          context__.to_vec(L));
      P0 = Eigen::Matrix<double, -1, 1>(L);
      stan::math::fill(P0, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> P0_flat__;
        current_statement__ = 22;
        assign(P0_flat__, nil_index_list(), context__.vals_r("P0"),
          "assigning variable P0_flat__");
        current_statement__ = 22;
        pos__ = 1;
        current_statement__ = 22;
        for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
          current_statement__ = 22;
          assign(P0, cons_list(index_uni(sym1__), nil_index_list()),
            P0_flat__[(pos__ - 1)], "assigning variable P0");
          current_statement__ = 22;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 22;
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        current_statement__ = 22;
        current_statement__ = 22;
        check_greater_or_equal(function__, "P0[sym1__]", P0[(sym1__ - 1)], 0);
      }
      current_statement__ = 22;
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        current_statement__ = 22;
        current_statement__ = 22;
        check_less_or_equal(function__, "P0[sym1__]", P0[(sym1__ - 1)], 1);}
      current_statement__ = 23;
      validate_non_negative_index("P1", "L", L);
      current_statement__ = 24;
      context__.validate_dims("data initialization","P1","double",
          context__.to_vec(L));
      P1 = Eigen::Matrix<double, -1, 1>(L);
      stan::math::fill(P1, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> P1_flat__;
        current_statement__ = 24;
        assign(P1_flat__, nil_index_list(), context__.vals_r("P1"),
          "assigning variable P1_flat__");
        current_statement__ = 24;
        pos__ = 1;
        current_statement__ = 24;
        for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
          current_statement__ = 24;
          assign(P1, cons_list(index_uni(sym1__), nil_index_list()),
            P1_flat__[(pos__ - 1)], "assigning variable P1");
          current_statement__ = 24;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 24;
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        current_statement__ = 24;
        current_statement__ = 24;
        check_greater_or_equal(function__, "P1[sym1__]", P1[(sym1__ - 1)], 0);
      }
      current_statement__ = 24;
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        current_statement__ = 24;
        current_statement__ = 24;
        check_less_or_equal(function__, "P1[sym1__]", P1[(sym1__ - 1)], 1);}
      current_statement__ = 25;
      validate_non_negative_index("H", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += N;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "model_hi_gl_namespace::log_prob";
(void) function__;  // suppress unused var warning
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<local_scalar_t__, -1, 1> H;
      H = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
      stan::math::fill(H, DUMMY_VAR__);
      
      current_statement__ = 1;
      H = in__.vector(N);
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 1;
        if (jacobian__) {
          current_statement__ = 1;
          assign(H, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(H[(sym1__ - 1)], 0, 1, lp__),
            "assigning variable H");
        } else {
          current_statement__ = 1;
          assign(H, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(H[(sym1__ - 1)], 0, 1),
            "assigning variable H");
        }}
      {
        current_statement__ = 6;
        for (int i = 1; i <= L; ++i) {
          current_statement__ = 4;
          for (int j = 1; j <= N; ++j) {
            current_statement__ = 2;
            lp_accum__.add(
              calc_lik(GL0[(j - 1)][(i - 1)], GL1[(j - 1)][(i - 1)],
                GL2[(j - 1)][(i - 1)], P0[(i - 1)], P1[(i - 1)],
                H[(j - 1)], pstream__));}}
        current_statement__ = 9;
        for (int j = 1; j <= N; ++j) {
          current_statement__ = 7;
          lp_accum__.add(beta_lpdf<false>(H[(j - 1)], 0.5, 0.5));}
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "model_hi_gl_namespace::write_array";
(void) function__;  // suppress unused var warning
    (void) function__;  // suppress unused var warning
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<double, -1, 1> H;
      H = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(H, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      H = in__.vector(N);
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 1;
        assign(H, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_constrain(H[(sym1__ - 1)], 0, 1),
          "assigning variable H");}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(H[(sym1__ - 1)]);}
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      Eigen::Matrix<double, -1, 1> H;
      H = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(H, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> H_flat__;
        current_statement__ = 1;
        assign(H_flat__, nil_index_list(), context__.vals_r("H"),
          "assigning variable H_flat__");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 1;
          assign(H, cons_list(index_uni(sym1__), nil_index_list()),
            H_flat__[(pos__ - 1)], "assigning variable H");
          current_statement__ = 1;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> H_free__;
      H_free__ = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(H_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 1;
        assign(H_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_free(H[(sym1__ - 1)], 0, 1),
          "assigning variable H_free__");}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(H_free__[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("H");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N)});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "H" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "H" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"H\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"parameters\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"H\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"parameters\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }
    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }
    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  
    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        
};
}
using stan_model = model_hi_gl_namespace::model_hi_gl;
#ifndef USING_R
// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_hi_gl_namespace::profiles__;
}
#endif
#endif
