// Generated by rstantools.  Do not edit by hand.

/*
    bgchm is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    bgchm is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with bgchm.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_p_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 26> locations_array__ =
  {" (found before start of program)",
  " (in 'p', line 9, column 1 to column 32)",
  " (in 'p', line 10, column 1 to column 32)",
  " (in 'p', line 16, column 3 to column 47)",
  " (in 'p', line 14, column 16 to line 17, column 3)",
  " (in 'p', line 14, column 2 to line 17, column 3)",
  " (in 'p', line 20, column 3 to column 47)",
  " (in 'p', line 18, column 16 to line 21, column 3)",
  " (in 'p', line 18, column 2 to line 21, column 3)",
  " (in 'p', line 13, column 14 to line 22, column 2)",
  " (in 'p', line 13, column 1 to line 22, column 2)",
  " (in 'p', line 25, column 2 to column 40)",
  " (in 'p', line 26, column 2 to column 40)",
  " (in 'p', line 23, column 14 to line 27, column 2)",
  " (in 'p', line 23, column 1 to line 27, column 2)",
  " (in 'p', line 2, column 1 to column 7)",
  " (in 'p', line 3, column 1 to column 8)",
  " (in 'p', line 4, column 1 to column 8)",
  " (in 'p', line 5, column 7 to column 9)",
  " (in 'p', line 5, column 11 to column 12)",
  " (in 'p', line 5, column 1 to column 39)",
  " (in 'p', line 6, column 7 to column 9)",
  " (in 'p', line 6, column 11 to column 12)",
  " (in 'p', line 6, column 1 to column 39)",
  " (in 'p', line 9, column 26 to column 27)",
  " (in 'p', line 10, column 26 to column 27)"};
#include <stan_meta_header.hpp>
class model_p final : public model_base_crtp<model_p> {
private:
  int L;
  int N0;
  int N1;
  std::vector<std::vector<int>> G0;
  std::vector<std::vector<int>> G1;
public:
  ~model_p() {}
  model_p(stan::io::var_context& context__, unsigned int random_seed__ = 0,
          std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ = "model_p_namespace::model_p";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 15;
      context__.validate_dims("data initialization", "L", "int",
        std::vector<size_t>{});
      L = std::numeric_limits<int>::min();
      current_statement__ = 15;
      L = context__.vals_i("L")[(1 - 1)];
      current_statement__ = 16;
      context__.validate_dims("data initialization", "N0", "int",
        std::vector<size_t>{});
      N0 = std::numeric_limits<int>::min();
      current_statement__ = 16;
      N0 = context__.vals_i("N0")[(1 - 1)];
      current_statement__ = 17;
      context__.validate_dims("data initialization", "N1", "int",
        std::vector<size_t>{});
      N1 = std::numeric_limits<int>::min();
      current_statement__ = 17;
      N1 = context__.vals_i("N1")[(1 - 1)];
      current_statement__ = 18;
      stan::math::validate_non_negative_index("G0", "N0", N0);
      current_statement__ = 19;
      stan::math::validate_non_negative_index("G0", "L", L);
      current_statement__ = 20;
      context__.validate_dims("data initialization", "G0", "int",
        std::vector<size_t>{static_cast<size_t>(N0), static_cast<size_t>(L)});
      G0 = std::vector<std::vector<int>>(N0,
             std::vector<int>(L, std::numeric_limits<int>::min()));
      {
        std::vector<int> G0_flat__;
        current_statement__ = 20;
        G0_flat__ = context__.vals_i("G0");
        current_statement__ = 20;
        pos__ = 1;
        current_statement__ = 20;
        for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
          current_statement__ = 20;
          for (int sym2__ = 1; sym2__ <= N0; ++sym2__) {
            current_statement__ = 20;
            stan::model::assign(G0, G0_flat__[(pos__ - 1)],
              "assigning variable G0", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 20;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 20;
      stan::math::check_greater_or_equal(function__, "G0", G0, 0);
      current_statement__ = 20;
      stan::math::check_less_or_equal(function__, "G0", G0, 2);
      current_statement__ = 21;
      stan::math::validate_non_negative_index("G1", "N1", N1);
      current_statement__ = 22;
      stan::math::validate_non_negative_index("G1", "L", L);
      current_statement__ = 23;
      context__.validate_dims("data initialization", "G1", "int",
        std::vector<size_t>{static_cast<size_t>(N1), static_cast<size_t>(L)});
      G1 = std::vector<std::vector<int>>(N1,
             std::vector<int>(L, std::numeric_limits<int>::min()));
      {
        std::vector<int> G1_flat__;
        current_statement__ = 23;
        G1_flat__ = context__.vals_i("G1");
        current_statement__ = 23;
        pos__ = 1;
        current_statement__ = 23;
        for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
          current_statement__ = 23;
          for (int sym2__ = 1; sym2__ <= N1; ++sym2__) {
            current_statement__ = 23;
            stan::model::assign(G1, G1_flat__[(pos__ - 1)],
              "assigning variable G1", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 23;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 23;
      stan::math::check_greater_or_equal(function__, "G1", G1, 0);
      current_statement__ = 23;
      stan::math::check_less_or_equal(function__, "G1", G1, 2);
      current_statement__ = 24;
      stan::math::validate_non_negative_index("P0", "L", L);
      current_statement__ = 25;
      stan::math::validate_non_negative_index("P1", "L", L);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = L + L;
  }
  inline std::string model_name() const final {
    return "model_p";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ = "model_p_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> P0 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(L, DUMMY_VAR__);
      current_statement__ = 1;
      P0 = in__.template read_constrain_lub<
             Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, 1, lp__, L);
      Eigen::Matrix<local_scalar_t__,-1,1> P1 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(L, DUMMY_VAR__);
      current_statement__ = 2;
      P1 = in__.template read_constrain_lub<
             Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, 1, lp__, L);
      {
        current_statement__ = 10;
        for (int i = 1; i <= L; ++i) {
          current_statement__ = 5;
          for (int j = 1; j <= N0; ++j) {
            current_statement__ = 3;
            lp_accum__.add(stan::math::binomial_lpmf<false>(
                             stan::model::rvalue(G0, "G0",
                               stan::model::index_uni(j),
                               stan::model::index_uni(i)), 2,
                             stan::model::rvalue(P0, "P0",
                               stan::model::index_uni(i))));
          }
          current_statement__ = 8;
          for (int j = 1; j <= N1; ++j) {
            current_statement__ = 6;
            lp_accum__.add(stan::math::binomial_lpmf<false>(
                             stan::model::rvalue(G1, "G1",
                               stan::model::index_uni(j),
                               stan::model::index_uni(i)), 2,
                             stan::model::rvalue(P1, "P1",
                               stan::model::index_uni(i))));
          }
        }
        current_statement__ = 14;
        for (int i = 1; i <= L; ++i) {
          current_statement__ = 11;
          lp_accum__.add(stan::math::beta_lpdf<false>(
                           stan::model::rvalue(P0, "P0",
                             stan::model::index_uni(i)), 0.5, 0.5));
          current_statement__ = 12;
          lp_accum__.add(stan::math::beta_lpdf<false>(
                           stan::model::rvalue(P1, "P1",
                             stan::model::index_uni(i)), 0.5, 0.5));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_p_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<double,-1,1> P0 =
        Eigen::Matrix<double,-1,1>::Constant(L,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      P0 = in__.template read_constrain_lub<
             Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, 1, lp__, L);
      Eigen::Matrix<double,-1,1> P1 =
        Eigen::Matrix<double,-1,1>::Constant(L,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      P1 = in__.template read_constrain_lub<
             Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, 1, lp__, L);
      out__.write(P0);
      out__.write(P1);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> P0 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(L, DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(P0,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(L),
        "assigning variable P0");
      out__.write_free_lub(0, 1, P0);
      Eigen::Matrix<local_scalar_t__,-1,1> P1 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(L, DUMMY_VAR__);
      current_statement__ = 2;
      stan::model::assign(P1,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(L),
        "assigning variable P1");
      out__.write_free_lub(0, 1, P1);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "P0", "double",
        std::vector<size_t>{static_cast<size_t>(L)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "P1", "double",
        std::vector<size_t>{static_cast<size_t>(L)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> P0 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(L, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> P0_flat__;
        current_statement__ = 1;
        P0_flat__ = context__.vals_r("P0");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
          current_statement__ = 1;
          stan::model::assign(P0, P0_flat__[(pos__ - 1)],
            "assigning variable P0", stan::model::index_uni(sym1__));
          current_statement__ = 1;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lub(0, 1, P0);
      Eigen::Matrix<local_scalar_t__,-1,1> P1 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(L, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> P1_flat__;
        current_statement__ = 2;
        P1_flat__ = context__.vals_r("P1");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
          current_statement__ = 2;
          stan::model::assign(P1, P1_flat__[(pos__ - 1)],
            "assigning variable P1", stan::model::index_uni(sym1__));
          current_statement__ = 2;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lub(0, 1, P1);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"P0", "P1"};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(L)},
                std::vector<size_t>{static_cast<size_t>(L)}};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
      param_names__.emplace_back(std::string() + "P0" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
      param_names__.emplace_back(std::string() + "P1" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
      param_names__.emplace_back(std::string() + "P0" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
      param_names__.emplace_back(std::string() + "P1" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"P0\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(L) + "},\"block\":\"parameters\"},{\"name\":\"P1\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(L) + "},\"block\":\"parameters\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"P0\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(L) + "},\"block\":\"parameters\"},{\"name\":\"P1\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(L) + "},\"block\":\"parameters\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (L + L);
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (L + L);
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_p_namespace::model_p;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_p_namespace::profiles__;
}
#endif
#endif
