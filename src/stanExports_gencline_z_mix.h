// Generated by rstantools.  Do not edit by hand.

/*
    bgchm is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    bgchm is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with bgchm.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.26.1-4-gd72b68b7-dirty
#include <stan/model/model_header.hpp>
namespace model_gencline_z_mix_namespace {
inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 
stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'gencline_z_mix', line 35, column 1 to column 43)",
                                                      " (in 'gencline_z_mix', line 36, column 1 to column 33)",
                                                      " (in 'gencline_z_mix', line 37, column 1 to column 18)",
                                                      " (in 'gencline_z_mix', line 38, column 1 to column 18)",
                                                      " (in 'gencline_z_mix', line 41, column 1 to column 36)",
                                                      " (in 'gencline_z_mix', line 43, column 2 to column 33)",
                                                      " (in 'gencline_z_mix', line 42, column 14 to line 44, column 2)",
                                                      " (in 'gencline_z_mix', line 42, column 1 to line 44, column 2)",
                                                      " (in 'gencline_z_mix', line 63, column 1 to column 19)",
                                                      " (in 'gencline_z_mix', line 64, column 1 to column 19)",
                                                      " (in 'gencline_z_mix', line 65, column 1 to column 25)",
                                                      " (in 'gencline_z_mix', line 66, column 1 to column 20)",
                                                      " (in 'gencline_z_mix', line 50, column 3 to column 61)",
                                                      " (in 'gencline_z_mix', line 48, column 15 to line 51, column 3)",
                                                      " (in 'gencline_z_mix', line 48, column 2 to line 51, column 3)",
                                                      " (in 'gencline_z_mix', line 47, column 14 to line 52, column 2)",
                                                      " (in 'gencline_z_mix', line 47, column 1 to line 52, column 2)",
                                                      " (in 'gencline_z_mix', line 55, column 2 to column 50)",
                                                      " (in 'gencline_z_mix', line 56, column 2 to column 45)",
                                                      " (in 'gencline_z_mix', line 53, column 16 to line 57, column 2)",
                                                      " (in 'gencline_z_mix', line 53, column 1 to line 57, column 2)",
                                                      " (in 'gencline_z_mix', line 59, column 1 to column 34)",
                                                      " (in 'gencline_z_mix', line 60, column 1 to column 34)",
                                                      " (in 'gencline_z_mix', line 28, column 1 to column 7)",
                                                      " (in 'gencline_z_mix', line 29, column 1 to column 7)",
                                                      " (in 'gencline_z_mix', line 30, column 26 to column 27)",
                                                      " (in 'gencline_z_mix', line 30, column 29 to column 30)",
                                                      " (in 'gencline_z_mix', line 30, column 1 to column 32)",
                                                      " (in 'gencline_z_mix', line 31, column 31 to column 32)",
                                                      " (in 'gencline_z_mix', line 31, column 34 to column 35)",
                                                      " (in 'gencline_z_mix', line 31, column 1 to column 37)",
                                                      " (in 'gencline_z_mix', line 32, column 26 to column 27)",
                                                      " (in 'gencline_z_mix', line 32, column 1 to column 31)",
                                                      " (in 'gencline_z_mix', line 35, column 33 to column 34)",
                                                      " (in 'gencline_z_mix', line 36, column 28 to column 29)",
                                                      " (in 'gencline_z_mix', line 41, column 31 to column 32)",
                                                      " (in 'gencline_z_mix', line 3, column 2 to column 11)",
                                                      " (in 'gencline_z_mix', line 4, column 2 to column 43)",
                                                      " (in 'gencline_z_mix', line 5, column 2 to column 13)",
                                                      " (in 'gencline_z_mix', line 2, column 40 to line 6, column 2)",
                                                      " (in 'gencline_z_mix', line 8, column 2 to column 12)",
                                                      " (in 'gencline_z_mix', line 9, column 2 to column 11)",
                                                      " (in 'gencline_z_mix', line 10, column 2 to column 28)",
                                                      " (in 'gencline_z_mix', line 22, column 15 to column 31)",
                                                      " (in 'gencline_z_mix', line 20, column 15 to column 33)",
                                                      " (in 'gencline_z_mix', line 19, column 3 to line 22, column 31)",
                                                      " (in 'gencline_z_mix', line 18, column 9 to line 23, column 14)",
                                                      " (in 'gencline_z_mix', line 17, column 15 to column 42)",
                                                      " (in 'gencline_z_mix', line 15, column 15 to column 53)",
                                                      " (in 'gencline_z_mix', line 14, column 15 to line 17, column 42)",
                                                      " (in 'gencline_z_mix', line 13, column 15 to column 46)",
                                                      " (in 'gencline_z_mix', line 12, column 10 to line 17, column 42)",
                                                      " (in 'gencline_z_mix', line 11, column 11 to line 18, column 3)",
                                                      " (in 'gencline_z_mix', line 11, column 2 to line 23, column 14)",
                                                      " (in 'gencline_z_mix', line 24, column 2 to column 14)",
                                                      " (in 'gencline_z_mix', line 7, column 57 to line 25, column 2)"};
template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
calc_phi(const T0__& h, const T1__& vv, const T2__& uu,
         std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    local_scalar_t__ phi;
    phi = DUMMY_VAR__;
    
    current_statement__ = 38;
    phi = (pow(h, vv) /
            (pow(h, vv) + (pow((1 - h), vv) * stan::math::exp(uu))));
    current_statement__ = 39;
    return phi;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct calc_phi_functor__ {
template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
operator()(const T0__& h, const T1__& vv, const T2__& uu,
           std::ostream* pstream__)  const 
{
return calc_phi(h, vv, uu, pstream__);
}
};
template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__>
stan::promote_args_t<T0__, T1__, T2__, T3__,
T4__>
calc_lik(const T0__& z, const T1__& h, const T2__& vv, const T3__& uu,
         const T4__& pl, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
          T1__,
          T2__,
          T3__,
          T4__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    local_scalar_t__ prob;
    prob = DUMMY_VAR__;
    
    local_scalar_t__ phi;
    phi = DUMMY_VAR__;
    
    current_statement__ = 43;
    phi = calc_phi(h, vv, uu, pstream__);
    current_statement__ = 54;
    if (logical_eq(pl, 2)) {
      current_statement__ = 52;
      if (logical_eq(z, 0)) {
        current_statement__ = 51;
        prob = (stan::math::log((1 - phi)) + stan::math::log((1 - phi)));
      } else {
        current_statement__ = 50;
        if (logical_eq(z, 1)) {
          current_statement__ = 49;
          prob = ((stan::math::log(2) + stan::math::log(phi)) +
                   stan::math::log((1 - phi)));
        } else {
          current_statement__ = 48;
          prob = (stan::math::log(phi) + stan::math::log(phi));
        }
      }
    } else {
      current_statement__ = 46;
      if (logical_eq(z, 0)) {
        current_statement__ = 45;
        prob = stan::math::log((1 - phi));
      } else {
        current_statement__ = 44;
        prob = stan::math::log(phi);
      }
    }
    current_statement__ = 55;
    return prob;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct calc_lik_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__>
stan::promote_args_t<T0__, T1__, T2__, T3__,
T4__>
operator()(const T0__& z, const T1__& h, const T2__& vv, const T3__& uu,
           const T4__& pl, std::ostream* pstream__)  const 
{
return calc_lik(z, h, vv, uu, pl, pstream__);
}
};
#include <stan_meta_header.hpp>
class model_gencline_z_mix final : public model_base_crtp<model_gencline_z_mix> {
private:
  int L;
  int N;
  std::vector<std::vector<double>> Z;
  std::vector<std::vector<double>> ploidy;
  Eigen::Matrix<double, -1, 1> H;
 
public:
  ~model_gencline_z_mix() { }
  
  inline std::string model_name() const final { return "model_gencline_z_mix"; }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.26.1-4-gd72b68b7-dirty", "stancflags = "};
  }
  
  
  model_gencline_z_mix(stan::io::var_context& context__,
                       unsigned int random_seed__ = 0,
                       std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "model_gencline_z_mix_namespace::model_gencline_z_mix";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 24;
      context__.validate_dims("data initialization","L","int",
          context__.to_vec());
      L = std::numeric_limits<int>::min();
      
      current_statement__ = 24;
      L = context__.vals_i("L")[(1 - 1)];
      current_statement__ = 25;
      context__.validate_dims("data initialization","N","int",
          context__.to_vec());
      N = std::numeric_limits<int>::min();
      
      current_statement__ = 25;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 26;
      validate_non_negative_index("Z", "N", N);
      current_statement__ = 27;
      validate_non_negative_index("Z", "L", L);
      current_statement__ = 28;
      context__.validate_dims("data initialization","Z","double",
          context__.to_vec(N, L));
      Z = std::vector<std::vector<double>>(N, std::vector<double>(L, std::numeric_limits<double>::quiet_NaN()));
      
      {
        std::vector<local_scalar_t__> Z_flat__;
        current_statement__ = 28;
        assign(Z_flat__, nil_index_list(), context__.vals_r("Z"),
          "assigning variable Z_flat__");
        current_statement__ = 28;
        pos__ = 1;
        current_statement__ = 28;
        for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
          current_statement__ = 28;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 28;
            assign(Z,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              Z_flat__[(pos__ - 1)], "assigning variable Z");
            current_statement__ = 28;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 28;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 28;
        for (int sym2__ = 1; sym2__ <= L; ++sym2__) {
          current_statement__ = 28;
          current_statement__ = 28;
          check_greater_or_equal(function__, "Z[sym1__, sym2__]",
                                 Z[(sym1__ - 1)][(sym2__ - 1)], 0);}}
      current_statement__ = 28;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 28;
        for (int sym2__ = 1; sym2__ <= L; ++sym2__) {
          current_statement__ = 28;
          current_statement__ = 28;
          check_less_or_equal(function__, "Z[sym1__, sym2__]",
                              Z[(sym1__ - 1)][(sym2__ - 1)], 2);}}
      current_statement__ = 29;
      validate_non_negative_index("ploidy", "N", N);
      current_statement__ = 30;
      validate_non_negative_index("ploidy", "L", L);
      current_statement__ = 31;
      context__.validate_dims("data initialization","ploidy","double",
          context__.to_vec(N, L));
      ploidy = std::vector<std::vector<double>>(N, std::vector<double>(L, std::numeric_limits<double>::quiet_NaN()));
      
      {
        std::vector<local_scalar_t__> ploidy_flat__;
        current_statement__ = 31;
        assign(ploidy_flat__, nil_index_list(), context__.vals_r("ploidy"),
          "assigning variable ploidy_flat__");
        current_statement__ = 31;
        pos__ = 1;
        current_statement__ = 31;
        for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
          current_statement__ = 31;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 31;
            assign(ploidy,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              ploidy_flat__[(pos__ - 1)], "assigning variable ploidy");
            current_statement__ = 31;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 31;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 31;
        for (int sym2__ = 1; sym2__ <= L; ++sym2__) {
          current_statement__ = 31;
          current_statement__ = 31;
          check_greater_or_equal(function__, "ploidy[sym1__, sym2__]",
                                 ploidy[(sym1__ - 1)][(sym2__ - 1)], 0);}}
      current_statement__ = 31;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 31;
        for (int sym2__ = 1; sym2__ <= L; ++sym2__) {
          current_statement__ = 31;
          current_statement__ = 31;
          check_less_or_equal(function__, "ploidy[sym1__, sym2__]",
                              ploidy[(sym1__ - 1)][(sym2__ - 1)], 2);}}
      current_statement__ = 32;
      validate_non_negative_index("H", "N", N);
      current_statement__ = 33;
      context__.validate_dims("data initialization","H","double",
          context__.to_vec(N));
      H = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(H, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> H_flat__;
        current_statement__ = 33;
        assign(H_flat__, nil_index_list(), context__.vals_r("H"),
          "assigning variable H_flat__");
        current_statement__ = 33;
        pos__ = 1;
        current_statement__ = 33;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 33;
          assign(H, cons_list(index_uni(sym1__), nil_index_list()),
            H_flat__[(pos__ - 1)], "assigning variable H");
          current_statement__ = 33;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 33;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 33;
        current_statement__ = 33;
        check_greater_or_equal(function__, "H[sym1__]", H[(sym1__ - 1)], 0);}
      current_statement__ = 33;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 33;
        current_statement__ = 33;
        check_less_or_equal(function__, "H[sym1__]", H[(sym1__ - 1)], 1);}
      current_statement__ = 34;
      validate_non_negative_index("center", "L", L);
      current_statement__ = 35;
      validate_non_negative_index("v", "L", L);
      current_statement__ = 36;
      validate_non_negative_index("u", "L", L);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += L;
      num_params_r__ += L;
      num_params_r__ += 1;
      num_params_r__ += 1;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "model_gencline_z_mix_namespace::log_prob";
(void) function__;  // suppress unused var warning
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<local_scalar_t__, -1, 1> center;
      center = Eigen::Matrix<local_scalar_t__, -1, 1>(L);
      stan::math::fill(center, DUMMY_VAR__);
      
      current_statement__ = 1;
      center = in__.vector(L);
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        current_statement__ = 1;
        if (jacobian__) {
          current_statement__ = 1;
          assign(center, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(center[(sym1__ - 1)], 0.001, 0.999,
              lp__), "assigning variable center");
        } else {
          current_statement__ = 1;
          assign(center, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(center[(sym1__ - 1)], 0.001, 0.999),
            "assigning variable center");
        }}
      Eigen::Matrix<local_scalar_t__, -1, 1> v;
      v = Eigen::Matrix<local_scalar_t__, -1, 1>(L);
      stan::math::fill(v, DUMMY_VAR__);
      
      current_statement__ = 2;
      v = in__.vector(L);
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        current_statement__ = 2;
        if (jacobian__) {
          current_statement__ = 2;
          assign(v, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(v[(sym1__ - 1)], 0.1, 10, lp__),
            "assigning variable v");
        } else {
          current_statement__ = 2;
          assign(v, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(v[(sym1__ - 1)], 0.1, 10),
            "assigning variable v");
        }}
      local_scalar_t__ sc;
      sc = DUMMY_VAR__;
      
      current_statement__ = 3;
      sc = in__.scalar();
      current_statement__ = 3;
      if (jacobian__) {
        current_statement__ = 3;
        sc = stan::math::lb_constrain(sc, 0, lp__);
      } else {
        current_statement__ = 3;
        sc = stan::math::lb_constrain(sc, 0);
      }
      local_scalar_t__ sv;
      sv = DUMMY_VAR__;
      
      current_statement__ = 4;
      sv = in__.scalar();
      current_statement__ = 4;
      if (jacobian__) {
        current_statement__ = 4;
        sv = stan::math::lb_constrain(sv, 0, lp__);
      } else {
        current_statement__ = 4;
        sv = stan::math::lb_constrain(sv, 0);
      }
      Eigen::Matrix<local_scalar_t__, -1, 1> u;
      u = Eigen::Matrix<local_scalar_t__, -1, 1>(L);
      stan::math::fill(u, DUMMY_VAR__);
      
      current_statement__ = 8;
      for (int i = 1; i <= L; ++i) {
        current_statement__ = 6;
        assign(u, cons_list(index_uni(i), nil_index_list()),
          (logit(center[(i - 1)]) * v[(i - 1)]), "assigning variable u");}
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        current_statement__ = 5;
        current_statement__ = 5;
        check_greater_or_equal(function__, "u[sym1__]", u[(sym1__ - 1)], -100);
      }
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        current_statement__ = 5;
        current_statement__ = 5;
        check_less_or_equal(function__, "u[sym1__]", u[(sym1__ - 1)], 100);}
      {
        current_statement__ = 17;
        for (int i = 1; i <= L; ++i) {
          current_statement__ = 15;
          for (int j = 1; j <= N; ++j) {
            current_statement__ = 13;
            lp_accum__.add(
              calc_lik(Z[(j - 1)][(i - 1)], H[(j - 1)], v[(i - 1)],
                u[(i - 1)], ploidy[(j - 1)][(i - 1)], pstream__));}}
        current_statement__ = 21;
        for (int i = 1; i <= L; ++i) {
          current_statement__ = 18;
          lp_accum__.add(normal_lpdf<false>(logit(center[(i - 1)]), 0, sc));
          current_statement__ = 19;
          lp_accum__.add(
            normal_lpdf<false>(stan::math::log10(v[(i - 1)]), 0, sv));}
        current_statement__ = 22;
        lp_accum__.add(normal_lpdf<false>(sc, 0, 1));
        current_statement__ = 23;
        lp_accum__.add(normal_lpdf<false>(sv, 0, 1));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "model_gencline_z_mix_namespace::write_array";
(void) function__;  // suppress unused var warning
    (void) function__;  // suppress unused var warning
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<double, -1, 1> center;
      center = Eigen::Matrix<double, -1, 1>(L);
      stan::math::fill(center, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      center = in__.vector(L);
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        current_statement__ = 1;
        assign(center, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_constrain(center[(sym1__ - 1)], 0.001, 0.999),
          "assigning variable center");}
      Eigen::Matrix<double, -1, 1> v;
      v = Eigen::Matrix<double, -1, 1>(L);
      stan::math::fill(v, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      v = in__.vector(L);
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        current_statement__ = 2;
        assign(v, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_constrain(v[(sym1__ - 1)], 0.1, 10),
          "assigning variable v");}
      double sc;
      sc = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      sc = in__.scalar();
      current_statement__ = 3;
      sc = stan::math::lb_constrain(sc, 0);
      double sv;
      sv = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      sv = in__.scalar();
      current_statement__ = 4;
      sv = stan::math::lb_constrain(sv, 0);
      Eigen::Matrix<double, -1, 1> u;
      u = Eigen::Matrix<double, -1, 1>(L);
      stan::math::fill(u, std::numeric_limits<double>::quiet_NaN());
      
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        vars__.emplace_back(center[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        vars__.emplace_back(v[(sym1__ - 1)]);}
      vars__.emplace_back(sc);
      vars__.emplace_back(sv);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 8;
      for (int i = 1; i <= L; ++i) {
        current_statement__ = 6;
        assign(u, cons_list(index_uni(i), nil_index_list()),
          (logit(center[(i - 1)]) * v[(i - 1)]), "assigning variable u");}
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        current_statement__ = 5;
        current_statement__ = 5;
        check_greater_or_equal(function__, "u[sym1__]", u[(sym1__ - 1)], -100);
      }
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        current_statement__ = 5;
        current_statement__ = 5;
        check_less_or_equal(function__, "u[sym1__]", u[(sym1__ - 1)], 100);}
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
          vars__.emplace_back(u[(sym1__ - 1)]);}
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      double sdc;
      sdc = std::numeric_limits<double>::quiet_NaN();
      
      double sdv;
      sdv = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 11;
      sdc = sd(logit(center));
      current_statement__ = 12;
      sdv = sd(stan::math::log10(v));
      current_statement__ = 9;
      current_statement__ = 9;
      check_greater_or_equal(function__, "sdc", sdc, 0);
      current_statement__ = 10;
      current_statement__ = 10;
      check_greater_or_equal(function__, "sdv", sdv, 0);
      vars__.emplace_back(sdc);
      vars__.emplace_back(sdv);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      Eigen::Matrix<double, -1, 1> center;
      center = Eigen::Matrix<double, -1, 1>(L);
      stan::math::fill(center, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> center_flat__;
        current_statement__ = 1;
        assign(center_flat__, nil_index_list(), context__.vals_r("center"),
          "assigning variable center_flat__");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
          current_statement__ = 1;
          assign(center, cons_list(index_uni(sym1__), nil_index_list()),
            center_flat__[(pos__ - 1)], "assigning variable center");
          current_statement__ = 1;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> center_free__;
      center_free__ = Eigen::Matrix<double, -1, 1>(L);
      stan::math::fill(center_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        current_statement__ = 1;
        assign(center_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_free(center[(sym1__ - 1)], 0.001, 0.999),
          "assigning variable center_free__");}
      Eigen::Matrix<double, -1, 1> v;
      v = Eigen::Matrix<double, -1, 1>(L);
      stan::math::fill(v, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> v_flat__;
        current_statement__ = 2;
        assign(v_flat__, nil_index_list(), context__.vals_r("v"),
          "assigning variable v_flat__");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
          current_statement__ = 2;
          assign(v, cons_list(index_uni(sym1__), nil_index_list()),
            v_flat__[(pos__ - 1)], "assigning variable v");
          current_statement__ = 2;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> v_free__;
      v_free__ = Eigen::Matrix<double, -1, 1>(L);
      stan::math::fill(v_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        current_statement__ = 2;
        assign(v_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_free(v[(sym1__ - 1)], 0.1, 10),
          "assigning variable v_free__");}
      double sc;
      sc = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      sc = context__.vals_r("sc")[(1 - 1)];
      double sc_free__;
      sc_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      sc_free__ = stan::math::lb_free(sc, 0);
      double sv;
      sv = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      sv = context__.vals_r("sv")[(1 - 1)];
      double sv_free__;
      sv_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      sv_free__ = stan::math::lb_free(sv, 0);
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        vars__.emplace_back(center_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        vars__.emplace_back(v_free__[(sym1__ - 1)]);}
      vars__.emplace_back(sc_free__);
      vars__.emplace_back(sv_free__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("center");
    names__.emplace_back("v");
    names__.emplace_back("sc");
    names__.emplace_back("sv");
    names__.emplace_back("u");
    names__.emplace_back("sdc");
    names__.emplace_back("sdv");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(L)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(L)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(L)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "center" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "v" + '.' + std::to_string(sym1__));
      }}
    param_names__.emplace_back(std::string() + "sc");
    param_names__.emplace_back(std::string() + "sv");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "u" + '.' + std::to_string(sym1__));
        }}
    }
    
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "sdc");
      param_names__.emplace_back(std::string() + "sdv");
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "center" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "v" + '.' + std::to_string(sym1__));
      }}
    param_names__.emplace_back(std::string() + "sc");
    param_names__.emplace_back(std::string() + "sv");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "u" + '.' + std::to_string(sym1__));
        }}
    }
    
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "sdc");
      param_names__.emplace_back(std::string() + "sdv");
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"center\",\"type\":{\"name\":\"vector\",\"length\":" << L << "},\"block\":\"parameters\"},{\"name\":\"v\",\"type\":{\"name\":\"vector\",\"length\":" << L << "},\"block\":\"parameters\"},{\"name\":\"sc\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sv\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"u\",\"type\":{\"name\":\"vector\",\"length\":" << L << "},\"block\":\"transformed_parameters\"},{\"name\":\"sdc\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"sdv\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"center\",\"type\":{\"name\":\"vector\",\"length\":" << L << "},\"block\":\"parameters\"},{\"name\":\"v\",\"type\":{\"name\":\"vector\",\"length\":" << L << "},\"block\":\"parameters\"},{\"name\":\"sc\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sv\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"u\",\"type\":{\"name\":\"vector\",\"length\":" << L << "},\"block\":\"transformed_parameters\"},{\"name\":\"sdc\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"sdv\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }
    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }
    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  
    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        
};
}
using stan_model = model_gencline_z_mix_namespace::model_gencline_z_mix;
#ifndef USING_R
// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_gencline_z_mix_namespace::profiles__;
}
#endif
#endif
